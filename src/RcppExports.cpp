// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_mcscanx_file
int rcpp_mcscanx_file(std::string blast_file, std::string gff_file, std::string prefix, std::string outdir, int match_score, int gap_penalty, int match_size, double e_value, int max_gaps, int overlap_window, bool is_pairwise, int in_synteny, bool verbose);
RcppExport SEXP _syntenet_rcpp_mcscanx_file(SEXP blast_fileSEXP, SEXP gff_fileSEXP, SEXP prefixSEXP, SEXP outdirSEXP, SEXP match_scoreSEXP, SEXP gap_penaltySEXP, SEXP match_sizeSEXP, SEXP e_valueSEXP, SEXP max_gapsSEXP, SEXP overlap_windowSEXP, SEXP is_pairwiseSEXP, SEXP in_syntenySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type blast_file(blast_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type gff_file(gff_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type prefix(prefixSEXP);
    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);
    Rcpp::traits::input_parameter< int >::type match_score(match_scoreSEXP);
    Rcpp::traits::input_parameter< int >::type gap_penalty(gap_penaltySEXP);
    Rcpp::traits::input_parameter< int >::type match_size(match_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type e_value(e_valueSEXP);
    Rcpp::traits::input_parameter< int >::type max_gaps(max_gapsSEXP);
    Rcpp::traits::input_parameter< int >::type overlap_window(overlap_windowSEXP);
    Rcpp::traits::input_parameter< bool >::type is_pairwise(is_pairwiseSEXP);
    Rcpp::traits::input_parameter< int >::type in_synteny(in_syntenySEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mcscanx_file(blast_file, gff_file, prefix, outdir, match_score, gap_penalty, match_size, e_value, max_gaps, overlap_window, is_pairwise, in_synteny, verbose));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_syntenet_rcpp_mcscanx_file", (DL_FUNC) &_syntenet_rcpp_mcscanx_file, 13},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_syntenet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
