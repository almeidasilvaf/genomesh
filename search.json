[{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with syntenet","title":"Getting help with syntenet","text":"Thanks using syntenet! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with syntenet","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with syntenet","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with syntenet","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/syntenet.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Inference and Analysis of Synteny Networks","text":"analysis synteny (.e., conserved gene content order genomic segment across species) can help understand trajectory duplicated genes evolution. particular, synteny analyses widely used investigate evolution genes derived whole-genome duplication (WGD) events, can reveal genomic rearrangements happened following duplication chromosomes. However, synteny analysis typically performed pairwise manner, can difficult explore interpret comparing several species. understand global patterns synteny, Zhao Schranz (2017) proposed network-based approach analyze synteny. synteny networks, genes given syntenic block represented nodes connected edge. Synteny networks used explore, among others, global synteny patterns mammalian angiosperm genomes (Zhao Schranz 2019), evolution MADS-box transcription factors (Zhao et al. 2017), infer microsynteny-based phylogeny angiosperms (Zhao et al. 2021). syntenet package can used infer synteny networks protein sequences perform downstream network analyses include: Network clustering using Infomap algorithm; Phylogenomic profiling, consists identifying species contain clusters. analysis can reveal highly conserved synteny clusters taxon-specific ones (e.g., family- order-specific clusters); Microsynteny-based phylogeny reconstruction maximum likelihood, can achieved inferring phylogeny binary matrix phylogenomic profiles IQ-TREE.","code":""},{"path":"/articles/syntenet.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Inference and Analysis of Synteny Networks","text":"syntenet can installed Bioconductor following code:","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager')  BiocManager::install(\"syntenet\") # Load package after installation library(syntenet)"},{"path":"/articles/syntenet.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Inference and Analysis of Synteny Networks","text":"vignette, use proteomes gene annotation algae species Ostreococcus lucimarinus Ostreococcus sp RCC809, obtained Pico-PLAZA 3.0 (Vandepoele et al. 2013).","code":"# Protein sequences data(proteomes) head(proteomes) #> $Olucimarinus #> AAStringSet object of length 1901: #>        width seq                                            names                #>    [1]   911 MTTMADERASIARVSVVKYGAI...VQLYTYPGSTNDPNFLLKLA* OL01G00010 #>    [2]   789 MGGRRCFCSRSSPVGVGAPAPA...PPQCGADIEAGSEPPPDKCG* OL01G00020 #>    [3]   618 MTRAKDAIVVDDGNDDDDDDDD...RDASASLALALAFSSEESVV* OL01G00030 #>    [4]   547 MPTKAQCWVVSYARVRDGASRS...TGSVSARASIFGEQASFRKA* OL01G00040 #>    [5]   319 MFTASHTTSKVTLRARVATQPR...HNGMALWRETTPKDSLIPAL* OL01G00050 #>    ...   ... ... #> [1897]   106 MAANDGETKLPEDGWIQPCFAC...RAIVDQVGGEHLKGSLMPIE* OL03G05910 #> [1898]    70 RMGIVKLATDGSVWVHSPIELD...QQWKDAYPGATLYACPGLKSK OL03G05920 #> [1899]   680 MDDAHDARWATTSARDGERARA...RSVGPSASDKILEALFPVAD* OL03G05930 #> [1900]   179 MRAVRERSKANLAARVKEEATR...ELERTRELFARARVRAYECI* OL03G05940 #> [1901]    83 MFVREARRAIPRFIKDPPQAFH...ESGDVRSVEGEVCGAVLVDE* OL03G05950 #>  #> $OspRCC809 #> AAStringSet object of length 1433: #>        width seq                                            names                #>    [1]   274 MASTTGSAARRVFVDVEKTVNG...DVLSLGQGSLSGESSSSDEE* ORCC809_01G00010 #>    [2]   175 MDQMRAANAQRSYLLFFVLFFL...SRRLLGRLDSEHTDLHPSWR* ORCC809_01G00020 #>    [3]   403 MTAPRVRASRRATATAAATVTA...LTERDLRYMEPKATIEEWMG* ORCC809_01G00030 #>    [4]   217 MTIDADGDDTLAPHAPAHGEVS...LIRLRGVEKTPTVDPPPPPP* ORCC809_01G00040 #>    [5]  1691 RIEADEKSLLVFGKESPVRTAC...VRMGNNVVTSRYASSESEEDV ORCC809_01G00050 #>    ...   ... ... #> [1429]   428 MVDANATTQTFVLEAEQELRVE...DLPSNVLLVGNLKWLGEDGK* ORCC809_03G02980 #> [1430]   378 MSVPRTTLRRIPLGNARDVLVT...ETLKAIDAVHAQCRDPCIAT* ORCC809_03G02990 #> [1431]  1156 MRATSAPSIVSFVARVACLFVA...CAFGTSLASFVVERARRLEN* ORCC809_03G03000 #> [1432]   541 MAITVFLTDHGRRASALTFLVV...GFGVGAVKFMLAPEMVKSLA* ORCC809_03G03010 #> [1433]   289 MSLSSLRSFSRSISSAPGGRSC...EPEEPEPEEPEPEEPEEPEP* ORCC809_03G03020  # Annotation (ranges) data(annotation) head(annotation) #> GRangesList object of length 2: #> $Olucimarinus #> GRanges object with 1903 ranges and 4 metadata columns: #>          seqnames        ranges strand |     type          ID        Name #>             <Rle>     <IRanges>  <Rle> | <factor> <character> <character> #>      [1]    Chr_1      939-3671      - |     gene  OL01G00010  OL01G00010 #>      [2]    Chr_1     3907-6927      + |     gene  OL01G00020  OL01G00020 #>      [3]    Chr_1     7085-9160      + |     gene  OL01G00030  OL01G00030 #>      [4]    Chr_1    9830-11480      + |     gene  OL01G00040  OL01G00040 #>      [5]    Chr_1   11467-12599      - |     gene  OL01G00050  OL01G00050 #>      ...      ...           ...    ... .      ...         ...         ... #>   [1899]    Chr_3 977435-977752      - |     gene  OL03G05910  OL03G05910 #>   [1900]    Chr_3 978702-978911      - |     gene  OL03G05920  OL03G05920 #>   [1901]    Chr_3 979281-981320      - |     gene  OL03G05930  OL03G05930 #>   [1902]    Chr_3 981778-982314      + |     gene  OL03G05940  OL03G05940 #>   [1903]    Chr_3 982498-982746      + |     gene  OL03G05950  OL03G05950 #>              gene_id #>          <character> #>      [1]  OL01G00010 #>      [2]  OL01G00020 #>      [3]  OL01G00030 #>      [4]  OL01G00040 #>      [5]  OL01G00050 #>      ...         ... #>   [1899]  OL03G05910 #>   [1900]  OL03G05920 #>   [1901]  OL03G05930 #>   [1902]  OL03G05940 #>   [1903]  OL03G05950 #>   ------- #>   seqinfo: 6 sequences from an unspecified genome; no seqlengths #>  #> $OspRCC809 #> GRanges object with 1433 ranges and 4 metadata columns: #>          seqnames        ranges strand |     type               ID #>             <Rle>     <IRanges>  <Rle> | <factor>      <character> #>      [1]    chr_1      321-1142      - |     gene ORCC809_01G00010 #>      [2]    chr_1     1463-2089      + |     gene ORCC809_01G00020 #>      [3]    chr_1     2162-3370      - |     gene ORCC809_01G00030 #>      [4]    chr_1     3774-4424      - |     gene ORCC809_01G00040 #>      [5]    chr_1     4693-9924      - |     gene ORCC809_01G00050 #>      ...      ...           ...    ... .      ...              ... #>   [1429]    chr_3 504915-506198      - |     gene ORCC809_03G02980 #>   [1430]    chr_3 506377-507510      + |     gene ORCC809_03G02990 #>   [1431]    chr_3 507856-511323      + |     gene ORCC809_03G03000 #>   [1432]    chr_3 511533-513155      - |     gene ORCC809_03G03010 #>   [1433]    chr_3 513841-514707      + |     gene ORCC809_03G03020 #>                      Name          gene_id #>               <character>      <character> #>      [1] ORCC809_01G00010 ORCC809_01G00010 #>      [2] ORCC809_01G00020 ORCC809_01G00020 #>      [3] ORCC809_01G00030 ORCC809_01G00030 #>      [4] ORCC809_01G00040 ORCC809_01G00040 #>      [5] ORCC809_01G00050 ORCC809_01G00050 #>      ...              ...              ... #>   [1429] ORCC809_03G02980 ORCC809_03G02980 #>   [1430] ORCC809_03G02990 ORCC809_03G02990 #>   [1431] ORCC809_03G03000 ORCC809_03G03000 #>   [1432] ORCC809_03G03010 ORCC809_03G03010 #>   [1433] ORCC809_03G03020 ORCC809_03G03020 #>   ------- #>   seqinfo: 6 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/syntenet.html","id":"importing-data-to-the-r-session","dir":"Articles","previous_headings":"","what":"Importing data to the R session","title":"Inference and Analysis of Synteny Networks","text":"detect synteny infer synteny networks, syntenet requires two objects input: seq: list AAStringSet objects containing translated sequences primary transcripts species. annotation: GRangesList CompressedGRangesList object containing coordinates genes seq. whole-genome protein sequences FASTA files, store FASTA files directory use function fasta2AAStringSetlist() read FASTA files list AAStringSet objects. Likewise, gene annotation GFF/GFF3/GTF files, store files directory use function gff2GRangesList() read GFF/GFF3/GTF files GRangesList object. demonstration, read example FASTA GFF3 files stored subdirectories named sequences/ annotation/, located extdata/ directory package.","code":""},{"path":"/articles/syntenet.html","id":"from-fasta-files-to-a-list-of-aastringset-objects","dir":"Articles","previous_headings":"Importing data to the R session","what":"From FASTA files to a list of AAStringSet objects","title":"Inference and Analysis of Synteny Networks","text":"can use fasta2AAStringSetlist() read FASTA files directory list AAStringSet objects. ’s ! Now list AAStringSet objects.","code":"# Path to directory containing FASTA files fasta_dir <- system.file(\"extdata\", \"sequences\", package = \"syntenet\") fasta_dir #> [1] \"/__w/_temp/Library/syntenet/extdata/sequences\"  dir(fasta_dir) # see the contents of the directory #> [1] \"Olucimarinus.fa.gz\" \"OspRCC809.fa.gz\"  # Read all FASTA files in `fasta_dir` aastringsetlist <- fasta2AAStringSetlist(fasta_dir) aastringsetlist #> $Olucimarinus #> AAStringSet object of length 100: #>       width seq                                             names                #>   [1]   911 MTTMADERASIARVSVVKYGAI...DVQLYTYPGSTNDPNFLLKLA* OL01G00010 #>   [2]   789 MGGRRCFCSRSSPVGVGAPAPA...FPPQCGADIEAGSEPPPDKCG* OL01G00020 #>   [3]   618 MTRAKDAIVVDDGNDDDDDDDD...DRDASASLALALAFSSEESVV* OL01G00030 #>   [4]   547 MPTKAQCWVVSYARVRDGASRS...VTGSVSARASIFGEQASFRKA* OL01G00040 #>   [5]   319 MFTASHTTSKVTLRARVATQPR...LHNGMALWRETTPKDSLIPAL* OL01G00050 #>   ...   ... ... #>  [96]   476 MVPARNFLDGANAREVELDRVV...VMRKLREPDSVARLAGQTGVR* OL01G00960 #>  [97]   771 MARHRGTRGGWNATTTEGGDGR...SIPDDGFDESSSVSASTIDGF* OL01G00970 #>  [98]   494 MDSEFWGCVIPAGRAVRVEVAT...FIKSRKDLFTIDGAYVRLVKK* OL01G00980 #>  [99]   264 VRAIVGATTRIQTRAPPRANHR...DWSFISDEFQDDASDSEVIDR* OL01G00990 #> [100]   565 MQLDAFRKATVKGVATRVGGAD...QLADLLRKNMGVPAKFIDAQN* OL01G01000 #>  #> $OspRCC809 #> AAStringSet object of length 100: #>       width seq                                             names                #>   [1]   274 MASTTGSAARRVFVDVEKTVNG...WDVLSLGQGSLSGESSSSDEE* ORCC809_01G00010 #>   [2]   175 MDQMRAANAQRSYLLFFVLFFL...SSRRLLGRLDSEHTDLHPSWR* ORCC809_01G00020 #>   [3]   403 MTAPRVRASRRATATAAATVTA...ALTERDLRYMEPKATIEEWMG* ORCC809_01G00030 #>   [4]   217 MTIDADGDDTLAPHAPAHGEVS...SLIRLRGVEKTPTVDPPPPPP* ORCC809_01G00040 #>   [5]  1691 RIEADEKSLLVFGKESPVRTAC...SVRMGNNVVTSRYASSESEEDV ORCC809_01G00050 #>   ...   ... ... #>  [96]   357 MSRGLADNWDDAEGYYCARIGE...TVNEALQHPFIVERIRTTAPN* ORCC809_01G00960 #>  [97]   164 MAMDSFRSAPRSRRRVEATSRE...SKPVKPVREPVRMVEASTGAH* ORCC809_01G00970 #>  [98]    85 MPEGTVFIGNIPYDATESSLTE...NLNAREYNGRQLRVDHAETMKG ORCC809_01G00980 #>  [99]   229 MKGGGGASGAAASANGNGAVGG...PDQRAQVEYLRQLAAQQGMVR* ORCC809_01G00990 #> [100]   103 RKAGGERWEDSSLAEWPENDFR...EMAGKFIGNRPVKLRKSAWNER ORCC809_01G01000"},{"path":"/articles/syntenet.html","id":"from-gffgtf-files-to-a-grangeslist-object","dir":"Articles","previous_headings":"Importing data to the R session","what":"From GFF/GTF files to a GRangesList object","title":"Inference and Analysis of Synteny Networks","text":"can use gff2GRangesList() read GFF/GFF3/GTF files directory GRangesList object. now GRangesList object.","code":"# Path to directory containing FASTA files gff_dir <- system.file(\"extdata\", \"annotation\", package = \"syntenet\") gff_dir #> [1] \"/__w/_temp/Library/syntenet/extdata/annotation\"  dir(gff_dir) # see the contents of the directory #> [1] \"Olucimarinus.gff3.gz\" \"OspRCC809.gff3.gz\"  # Read all FASTA files in `fasta_dir` grangeslist <- gff2GRangesList(gff_dir) grangeslist #> GRangesList object of length 2: #> $Olucimarinus #> GRanges object with 100 ranges and 7 metadata columns: #>         seqnames        ranges strand |      source     type     score #>            <Rle>     <IRanges>  <Rle> |    <factor> <factor> <numeric> #>     [1]    Chr_1      939-3671      - | rtracklayer     gene        NA #>     [2]    Chr_1     3907-6927      + | rtracklayer     gene        NA #>     [3]    Chr_1     7085-9160      + | rtracklayer     gene        NA #>     [4]    Chr_1    9830-11480      + | rtracklayer     gene        NA #>     [5]    Chr_1   11467-12599      - | rtracklayer     gene        NA #>     ...      ...           ...    ... .         ...      ...       ... #>    [96]    Chr_1 170975-172402      + | rtracklayer     gene        NA #>    [97]    Chr_1 172445-174757      - | rtracklayer     gene        NA #>    [98]    Chr_1 175358-176839      + | rtracklayer     gene        NA #>    [99]    Chr_1 176901-177692      - | rtracklayer     gene        NA #>   [100]    Chr_1 177742-179436      - | rtracklayer     gene        NA #>             phase          ID        Name     gene_id #>         <integer> <character> <character> <character> #>     [1]      <NA>  OL01G00010  OL01G00010  OL01G00010 #>     [2]      <NA>  OL01G00020  OL01G00020  OL01G00020 #>     [3]      <NA>  OL01G00030  OL01G00030  OL01G00030 #>     [4]      <NA>  OL01G00040  OL01G00040  OL01G00040 #>     [5]      <NA>  OL01G00050  OL01G00050  OL01G00050 #>     ...       ...         ...         ...         ... #>    [96]      <NA>  OL01G00960  OL01G00960  OL01G00960 #>    [97]      <NA>  OL01G00970  OL01G00970  OL01G00970 #>    [98]      <NA>  OL01G00980  OL01G00980  OL01G00980 #>    [99]      <NA>  OL01G00990  OL01G00990  OL01G00990 #>   [100]      <NA>  OL01G01000  OL01G01000  OL01G01000 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths #>  #> $OspRCC809 #> GRanges object with 100 ranges and 7 metadata columns: #>         seqnames        ranges strand |      source     type     score #>            <Rle>     <IRanges>  <Rle> |    <factor> <factor> <numeric> #>     [1]    chr_1      321-1142      - | rtracklayer     gene        NA #>     [2]    chr_1     1463-2089      + | rtracklayer     gene        NA #>     [3]    chr_1     2162-3370      - | rtracklayer     gene        NA #>     [4]    chr_1     3774-4424      - | rtracklayer     gene        NA #>     [5]    chr_1     4693-9924      - | rtracklayer     gene        NA #>     ...      ...           ...    ... .         ...      ...       ... #>    [96]    chr_1 165459-166529      - | rtracklayer     gene        NA #>    [97]    chr_1 166654-167213      - | rtracklayer     gene        NA #>    [98]    chr_1 167296-167550      + | rtracklayer     gene        NA #>    [99]    chr_1 167542-168228      + | rtracklayer     gene        NA #>   [100]    chr_1 168639-168947      - | rtracklayer     gene        NA #>             phase               ID             Name          gene_id #>         <integer>      <character>      <character>      <character> #>     [1]      <NA> ORCC809_01G00010 ORCC809_01G00010 ORCC809_01G00010 #>     [2]      <NA> ORCC809_01G00020 ORCC809_01G00020 ORCC809_01G00020 #>     [3]      <NA> ORCC809_01G00030 ORCC809_01G00030 ORCC809_01G00030 #>     [4]      <NA> ORCC809_01G00040 ORCC809_01G00040 ORCC809_01G00040 #>     [5]      <NA> ORCC809_01G00050 ORCC809_01G00050 ORCC809_01G00050 #>     ...       ...              ...              ...              ... #>    [96]      <NA> ORCC809_01G00960 ORCC809_01G00960 ORCC809_01G00960 #>    [97]      <NA> ORCC809_01G00970 ORCC809_01G00970 ORCC809_01G00970 #>    [98]      <NA> ORCC809_01G00980 ORCC809_01G00980 ORCC809_01G00980 #>    [99]      <NA> ORCC809_01G00990 ORCC809_01G00990 ORCC809_01G00990 #>   [100]      <NA> ORCC809_01G01000 ORCC809_01G01000 ORCC809_01G01000 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/syntenet.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data preprocessing","title":"Inference and Analysis of Synteny Networks","text":"first part pipeline consists processing data make match standard structure. However, processing data synteny detection, must use function check_input() check data can enter pipeline. function checks input data 3 required conditions: Names seq list (.e., names(seq)) match names annotation GRangesList/CompressedGRangesList (.e., names(annotation)) species (list elements), number sequences seq greater number genes annotation. way ensure users input translated sequences multiple isoforms gene (generated alternative splicing). Ideally, number sequences seq equal number genes annotation, may always stand true non-protein-coding genes. species, sequence names (.e., names(seq[[x]]), equivalent FASTA headers) match gene names annotation. default, syntenet looks gene IDs column named “gene_id” GRanges objects (default field GFF3 files). gene IDs different column (e.g., “Name”), can specify gene_field parameter check_input() process_input(). Let’s check example data sets satisfy 3 criteria: can see, data passed checks. Now, let’s process function process_input(). function processes input sequences annotation : Remove whitespace anything sequence names (.e., names(seq[[x]]), equivalent FASTA headers), . Add unique species identifier sequence names. species identifier consists first 3-5 strings element name. instance, first element seq list named “Athaliana”, sequence identifier “Atha_” added beginning gene name (e.g., Atha_AT1G01010). sequences asterisk (*) representing stop codon, remove . Add unique species identifier () gene chromosome names element annotation GRangesList/CompressedGRangesList. Filter element annotation GRangesList/CompressedGRangesList keep seqnames, ranges, gene ID. Let’s process input data:","code":"check_input(proteomes, annotation) #> [1] TRUE pdata <- process_input(proteomes, annotation)  # Looking at the processed data pdata$seq #> $Olucimarinus #> AAStringSet object of length 1901: #>        width seq                                            names                #>    [1]   910 MTTMADERASIARVSVVKYGAI...DVQLYTYPGSTNDPNFLLKLA Olu_OL01G00010 #>    [2]   788 MGGRRCFCSRSSPVGVGAPAPA...FPPQCGADIEAGSEPPPDKCG Olu_OL01G00020 #>    [3]   617 MTRAKDAIVVDDGNDDDDDDDD...DRDASASLALALAFSSEESVV Olu_OL01G00030 #>    [4]   546 MPTKAQCWVVSYARVRDGASRS...VTGSVSARASIFGEQASFRKA Olu_OL01G00040 #>    [5]   318 MFTASHTTSKVTLRARVATQPR...LHNGMALWRETTPKDSLIPAL Olu_OL01G00050 #>    ...   ... ... #> [1897]   105 MAANDGETKLPEDGWIQPCFAC...LRAIVDQVGGEHLKGSLMPIE Olu_OL03G05910 #> [1898]    69 RMGIVKLATDGSVWVHSPIELD...AQQWKDAYPGATLYACPGLKS Olu_OL03G05920 #> [1899]   679 MDDAHDARWATTSARDGERARA...ARSVGPSASDKILEALFPVAD Olu_OL03G05930 #> [1900]   178 MRAVRERSKANLAARVKEEATR...LELERTRELFARARVRAYECI Olu_OL03G05940 #> [1901]    82 MFVREARRAIPRFIKDPPQAFH...QESGDVRSVEGEVCGAVLVDE Olu_OL03G05950 #>  #> $OspRCC809 #> AAStringSet object of length 1433: #>        width seq                                            names                #>    [1]   273 MASTTGSAARRVFVDVEKTVNG...WDVLSLGQGSLSGESSSSDEE Osp_ORCC809_01G00010 #>    [2]   174 MDQMRAANAQRSYLLFFVLFFL...SSRRLLGRLDSEHTDLHPSWR Osp_ORCC809_01G00020 #>    [3]   402 MTAPRVRASRRATATAAATVTA...ALTERDLRYMEPKATIEEWMG Osp_ORCC809_01G00030 #>    [4]   216 MTIDADGDDTLAPHAPAHGEVS...SLIRLRGVEKTPTVDPPPPPP Osp_ORCC809_01G00040 #>    [5]  1690 RIEADEKSLLVFGKESPVRTAC...SVRMGNNVVTSRYASSESEED Osp_ORCC809_01G00050 #>    ...   ... ... #> [1429]   427 MVDANATTQTFVLEAEQELRVE...GDLPSNVLLVGNLKWLGEDGK Osp_ORCC809_03G02980 #> [1430]   377 MSVPRTTLRRIPLGNARDVLVT...KETLKAIDAVHAQCRDPCIAT Osp_ORCC809_03G02990 #> [1431]  1155 MRATSAPSIVSFVARVACLFVA...ACAFGTSLASFVVERARRLEN Osp_ORCC809_03G03000 #> [1432]   540 MAITVFLTDHGRRASALTFLVV...PGFGVGAVKFMLAPEMVKSLA Osp_ORCC809_03G03010 #> [1433]   288 MSLSSLRSFSRSISSAPGGRSC...EEPEEPEPEEPEPEEPEEPEP Osp_ORCC809_03G03020 pdata$annotation #> $Olucimarinus #> GRanges object with 1903 ranges and 1 metadata column: #>           seqnames        ranges strand |           gene #>              <Rle>     <IRanges>  <Rle> |    <character> #>      [1] Olu_Chr_1      939-3671      - | Olu_OL01G00010 #>      [2] Olu_Chr_1     3907-6927      + | Olu_OL01G00020 #>      [3] Olu_Chr_1     7085-9160      + | Olu_OL01G00030 #>      [4] Olu_Chr_1    9830-11480      + | Olu_OL01G00040 #>      [5] Olu_Chr_1   11467-12599      - | Olu_OL01G00050 #>      ...       ...           ...    ... .            ... #>   [1899] Olu_Chr_3 977435-977752      - | Olu_OL03G05910 #>   [1900] Olu_Chr_3 978702-978911      - | Olu_OL03G05920 #>   [1901] Olu_Chr_3 979281-981320      - | Olu_OL03G05930 #>   [1902] Olu_Chr_3 981778-982314      + | Olu_OL03G05940 #>   [1903] Olu_Chr_3 982498-982746      + | Olu_OL03G05950 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths #>  #> $OspRCC809 #> GRanges object with 1433 ranges and 1 metadata column: #>           seqnames        ranges strand |                 gene #>              <Rle>     <IRanges>  <Rle> |          <character> #>      [1] Osp_chr_1      321-1142      - | Osp_ORCC809_01G00010 #>      [2] Osp_chr_1     1463-2089      + | Osp_ORCC809_01G00020 #>      [3] Osp_chr_1     2162-3370      - | Osp_ORCC809_01G00030 #>      [4] Osp_chr_1     3774-4424      - | Osp_ORCC809_01G00040 #>      [5] Osp_chr_1     4693-9924      - | Osp_ORCC809_01G00050 #>      ...       ...           ...    ... .                  ... #>   [1429] Osp_chr_3 504915-506198      - | Osp_ORCC809_03G02980 #>   [1430] Osp_chr_3 506377-507510      + | Osp_ORCC809_03G02990 #>   [1431] Osp_chr_3 507856-511323      + | Osp_ORCC809_03G03000 #>   [1432] Osp_chr_3 511533-513155      - | Osp_ORCC809_03G03010 #>   [1433] Osp_chr_3 513841-514707      + | Osp_ORCC809_03G03020 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/syntenet.html","id":"synteny-network-inference","dir":"Articles","previous_headings":"","what":"Synteny network inference","title":"Inference and Analysis of Synteny Networks","text":"Now processed data, can infer synteny network. detect synteny, need tabular output BLASTp (Altschul et al. 1997) similar programs. get , can use functions run_diamond(), run_last(), runs DIAMOND (Buchfink, Reuter, Drost 2021) last (Kiełbasa et al. 2011) R session automatically parses output list data frames 1. Let’s demonstrate run_diamond() works. Needless say, need DIAMOND installed machine PATH run function. check DIAMOND installed, use function diamond_is_installed() 2. output run_diamond() list data frames containing tabular output -vs-DIAMOND searches. Let’s take look . Now, can use list DIAMOND data frames detect synteny. , reimplemented popular MCScanX algorithm (Y. Wang et al. 2012), originally written C++, using Rcpp (Eddelbuettel François 2011) framework R C++ integration. means syntenet comes native version MCScanX algorithm, can run MCScanX R without install . Amazing, huh? detect synteny infer synteny network, use function infer_syntenet(). output network represented -called edge list (.e., 2-column data frame node 1 node 2 columns 1 2, respectively). synteny network, row edge list represents anchor pair. edge list , example, genes Olu_OL01G00070 Osp_ORCC809_01G06520 anchor pair (.e., duplicates derived large-scale duplication event). Note gene IDs preceded IDs created process_input(). hood, process_input() uses function create_species_id_table() create unique IDs names seq annotation lists. obtain data frame IDs corresponding species, can use following code:","code":"data(blast_list) if(diamond_is_installed()) {     blast_list <- run_diamond(seq = pdata$seq) } # List names names(blast_list) #> [1] \"Olucimarinus_Olucimarinus\" \"Olucimarinus_OspRCC809\"    #> [3] \"OspRCC809_Olucimarinus\"    \"OspRCC809_OspRCC809\"  # Inspect first data frame head(blast_list$Olucimarinus_Olucimarinus) #>            query             db perc_identity length mismatches gap_open qstart #> 1 Olu_OL01G00010 Olu_OL01G00010         100.0    910          0        0      1 #> 2 Olu_OL01G00010 Olu_OL01G00020          30.0    494        310       10    427 #> 3 Olu_OL01G00020 Olu_OL01G00020         100.0    788          0        0      1 #> 4 Olu_OL01G00020 Olu_OL01G00010          28.7    614        370       17    155 #> 5 Olu_OL01G00030 Olu_OL01G00030         100.0    617          0        0      1 #> 6 Olu_OL01G00040 Olu_OL01G00040         100.0    546          0        0      1 #>   qend tstart tend   evalue bitscore #> 1  910      1  910 0.00e+00     1623 #> 2  894    270  753 1.67e-54      199 #> 3  788      1  788 0.00e+00     1363 #> 4  753    334  894 3.98e-56      204 #> 5  617      1  617 0.00e+00     1046 #> 6  546      1  546 0.00e+00     1035 # Infer synteny network net <- infer_syntenet(blast_list, pdata$annotation)  # Look at the output head(net) #>          Anchor1              Anchor2 #> 1 Olu_OL01G00070 Osp_ORCC809_01G06520 #> 2 Olu_OL01G00100 Osp_ORCC809_01G06480 #> 3 Olu_OL01G00130 Osp_ORCC809_01G06440 #> 4 Olu_OL01G00150 Osp_ORCC809_01G06420 #> 5 Olu_OL01G00160 Osp_ORCC809_01G06410 #> 6 Olu_OL01G00170 Osp_ORCC809_01G06400 # Get a 2-column data frame of species IDs and names id_table <- create_species_id_table(names(proteomes))  id_table #>   species_id species_name #> 1        Olu Olucimarinus #> 2        Osp    OspRCC809"},{"path":"/articles/syntenet.html","id":"phylogenomic-profiling","dir":"Articles","previous_headings":"","what":"Phylogenomic profiling","title":"Inference and Analysis of Synteny Networks","text":"inferring synteny network, first thing want cluster network identify phylogenetic groups contained cluster. call phylogenomic profiling. way, can identify clade-specific clusters, highly conserved clusters, instance. , use example network BUSCO genes 25 eudicot species, obtained Zhao Schranz (2019). obtain phylogenomic profiles, first need cluster network. can done cluster_network(). 3 Now gene assigned cluster, can identify phylogenomic profiles cluster. function returns matrix phylogenomic profiles, clusters rows species columns. plot worth thousand words (numbers), can use function plot_profiles() visualize phylogenomic profiles heatmap species rows synteny network clusters columns. heatmap generated function highly customizable users. important remarks : can add legend species metadata (e.g., taxonomic information) passing 2-column data frame parameter species_annotation. Columns (network clusters) grouped Ward’s clustering matrix distances. method compute distance matrix can defined users parameters dist_function dist_params. default, uses function stats::dist() parameter method = \"euclidean\". Likewise, function cluster distance matrix additional parameters can specified clust_function clust_params. default, uses stats::hclust parameter method = \"ward.D\". order species displayed can defined users parameter cluster_species. strongly recommend passing vector species order matches species tree, patterns can explored phylogenetic context. Importantly, character vector named, vector names used species names plot. nice way replace species abbreviations full names. , briefly demonstrate play parameters just mentioned 3 remarks , : Create vector order want species displayed, longer species names vector names. Create metadata data frame containing family species. Use function dsvdis() labdsv package calculate Ruzicka distances clustering columns.  heatmap nice way observe patterns. instance, can see Rosaceae-specific clusters, Fabaceae-specific clusters, highly conserved ones well. want explore details group-specific clusters, can use function find_GS_clusters(). , need input profiles matrix data frame species annotation (.e., species groups). can see, 414 family-specific clusters network. Let’s plot heatmap group-specific clusters .  Pretty cool, huh? can also visualize clusters network plot function plot_network(). example, let’s visualize group-specific clusters.","code":"# Load example data and take a look at it data(network) head(network) #>       node1           node2 #> 1 cca_23646  Lang_109327134 #> 2 cca_23646  Lang_109328075 #> 3 cca_23646   Mnot_21394516 #> 4 cca_23646  Zjuj_107413994 #> 5 cca_23646 adu_Aradu.8SN53 #> 6 cca_23646     car_14082.1  # Cluster network clusters <- cluster_network(network) head(clusters) #>        Gene Cluster #> 1 cca_23646       1 #> 2 cca_23668       2 #> 3 cca_32926       3 #> 4 cca_26186       4 #> 5 cca_24381       5 #> 6 cca_24396       6 # Phylogenomic profiling profiles <- phylogenomic_profile(clusters)  # Exploring the output head(profiles) #>     #>     adu car cca fve gma hlu jcu Lang lja lus mdo mes Mnot mtr pbr pmu ppe ptr #>   1   1   1   1   1   2   0   0    2   1   2   2   1    1   1   3   1   1   1 #>   2   1   1   1   1   1   0   0    1   0   1   1   1    1   1   1   1   1   1 #>   3   0   1   1   1   1   0   0    1   1   2   1   1    1   1   1   1   1   1 #>   4   0   1   1   1   2   0   1    2   1   2   0   2    1   1   1   1   1   0 #>   5   1   1   1   1   2   0   1    0   0   0   1   1    1   1   1   1   1   1 #>   6   2   1   2   1   3   0   1    2   0   2   2   1    1   2   2   1   1   2 #>     #>     pvu rco roc tpr van vra Zjuj #>   1   1   1   1   1   1   1    1 #>   2   1   0   0   1   1   1    1 #>   3   1   1   1   1   0   0    1 #>   4   1   1   0   1   1   0    1 #>   5   1   1   1   1   1   2    1 #>   6   1   1   1   1   0   1    1 # 1) Create a named vector of custom species order to plot species_order <- setNames(     # vector elements     c(         \"vra\", \"van\", \"pvu\", \"gma\", \"cca\", \"tpr\", \"mtr\", \"adu\", \"lja\",         \"Lang\", \"car\", \"pmu\", \"ppe\", \"pbr\", \"mdo\", \"roc\", \"fve\",         \"Mnot\", \"Zjuj\", \"jcu\", \"mes\", \"rco\", \"lus\", \"ptr\"     ),     # vector names     c(         \"V. radiata\", \"V. angularis\", \"P. vulgaris\", \"G. max\", \"C. cajan\",         \"T. pratense\", \"M. truncatula\", \"A. duranensis\", \"L. japonicus\",         \"L. angustifolius\", \"C. arietinum\", \"P. mume\", \"P. persica\",         \"P. bretschneideri\", \"M. domestica\", \"R. occidentalis\",          \"F. vesca\", \"M. notabilis\", \"Z. jujuba\",         \"J. curcas\", \"M. esculenta\", \"R. communis\",          \"L. usitatissimum\", \"P. trichocarpa\"     ) ) species_order #>        V. radiata      V. angularis       P. vulgaris            G. max  #>             \"vra\"             \"van\"             \"pvu\"             \"gma\"  #>          C. cajan       T. pratense     M. truncatula     A. duranensis  #>             \"cca\"             \"tpr\"             \"mtr\"             \"adu\"  #>      L. japonicus  L. angustifolius      C. arietinum           P. mume  #>             \"lja\"            \"Lang\"             \"car\"             \"pmu\"  #>        P. persica P. bretschneideri      M. domestica   R. occidentalis  #>             \"ppe\"             \"pbr\"             \"mdo\"             \"roc\"  #>          F. vesca      M. notabilis         Z. jujuba         J. curcas  #>             \"fve\"            \"Mnot\"            \"Zjuj\"             \"jcu\"  #>      M. esculenta       R. communis  L. usitatissimum    P. trichocarpa  #>             \"mes\"             \"rco\"             \"lus\"             \"ptr\"  # 2) Create a metadata data frame containing the family of each species species_annotation <- data.frame(     Species = species_order,     Family = c(         rep(\"Fabaceae\", 11), rep(\"Rosaceae\", 6),         \"Moraceae\", \"Ramnaceae\", rep(\"Euphorbiaceae\", 3),          \"Linaceae\", \"Salicaceae\"     ) ) head(species_annotation) #>              Species   Family #> V. radiata       vra Fabaceae #> V. angularis     van Fabaceae #> P. vulgaris      pvu Fabaceae #> G. max           gma Fabaceae #> C. cajan         cca Fabaceae #> T. pratense      tpr Fabaceae   # 3) Plot phylogenomic profiles, but using Ruzicka distances plot_profiles(     profiles,      species_annotation,      cluster_species = species_order,      dist_function = labdsv::dsvdis,     dist_params = list(index = \"ruzicka\") ) # Find group-specific clusters gs_clusters <- find_GS_clusters(profiles, species_annotation) #> Could not find annotation for species:  #> hlu  head(gs_clusters) #>        Group Percentage Cluster #> 2   Fabaceae      90.91    1156 #> 21  Fabaceae      81.82    1170 #> 5  Ramnaceae     100.00    1279 #> 22  Fabaceae      90.91    1305 #> 23  Fabaceae      81.82    1309 #> 24  Fabaceae      90.91    1310  # How many family-specific clusters are there? nrow(gs_clusters) #> [1] 414 # Filter profiles matrix to only include group-specific clusters idx <- rownames(profiles) %in% gs_clusters$Cluster p_gs <- profiles[idx, ]  # Plot heatmap plot_profiles(     p_gs, species_annotation,      cluster_species = species_order,      cluster_columns = TRUE ) # 1) Visualize a network of first 5 GS-clusters id <- gs_clusters$Cluster[1:5] plot_network(network, clusters, cluster_id = id) # 2) Coloring nodes by family genes <- unique(c(network$node1, network$node2)) gene_df <- data.frame(     Gene = genes,     Species = unlist(lapply(strsplit(genes, \"_\"), head, 1)) ) gene_df <- merge(gene_df, species_annotation)[, c(\"Gene\", \"Family\")] head(gene_df) #>              Gene   Family #> 1 adu_Aradu.3W61T Fabaceae #> 2 adu_Aradu.FQ8CE Fabaceae #> 3 adu_Aradu.0W76I Fabaceae #> 4 adu_Aradu.M4JP1 Fabaceae #> 5 adu_Aradu.B26Z6 Fabaceae #> 6 adu_Aradu.PLM7U Fabaceae  plot_network(network, clusters, cluster_id = id, color_by = gene_df) # 3) Interactive visualization (zoom out and in to explore it) plot_network(     network, clusters, cluster_id = id,      interactive = TRUE, dim_interactive = c(500, 300) )"},{"path":"/articles/syntenet.html","id":"microsynteny-based-phylogeny-reconstruction","dir":"Articles","previous_headings":"","what":"Microsynteny-based phylogeny reconstruction","title":"Inference and Analysis of Synteny Networks","text":"Finally, can use information presence/absence clusters species reconstruct microsynteny-based phylogeny. , first need binarize profiles matrix (0s 1s representing absence presence, respectively) transpose . can done binarize_and_tranpose(). Now, can use transposed binary matrix input IQ-TREE (Minh et al. 2020) infer phylogeny. , can use function infer_microsynteny_phylogeny(), allows run IQ-TREE R session 4. need IQ-TREE installed machine PATH run function. can check IQ-TREE installed iqtree_is_installed(). sake demonstration, infer phylogeny infer_microsynteny_phylogeny() using profiles BUSCO genes six legume species . also remove non-variable sites (.e., clusters present species absent species). However, ’re using filtered data set speed issues. real-life applications, best thing include phylogenomic profiles genes (BUSCO genes). output infer_microsynteny_phylogeny() character vector paths output files IQ-TREE. Usually, interested file ending .treefile. species tree Newick format, can visualized favorite tree viewer. strongly recommend using read.tree() function Bioconductor package treeio (L.-G. Wang et al. 2020) read tree, visualizing ggtree Bioc package (Yu et al. 2017). example, let’s visualize microsynteny-based phylogeny 123 angiosperm species, whose phylogenomic profiles obtained Zhao et al. (2021).","code":"bt_mat <- binarize_and_transpose(profiles)  # Looking at the first 5 rows and 5 columns of the matrix bt_mat[1:5, 1:5] #>       #>       1 2 3 4 5 #>   adu 1 1 0 0 1 #>   car 1 1 1 1 1 #>   cca 1 1 1 1 1 #>   fve 1 1 1 1 1 #>   gma 1 1 1 1 1 # Leave only 6 legume species and P. mume as an outgroup for testing purposes included <- c(\"gma\", \"pvu\", \"vra\", \"van\", \"cca\", \"pmu\") bt_mat <- bt_mat[rownames(bt_mat) %in% included, ]  # Remove non-variable sites bt_mat <- bt_mat[, colSums(bt_mat) != length(included)]  if(iqtree_is_installed()) {     phylo <- infer_microsynteny_phylogeny(bt_mat, outgroup = \"pmu\",                                            threads = 1) } data(angiosperm_phylogeny)  # Plotting the tree library(ggtree) ggtree(angiosperm_phylogeny) +     geom_tiplab(size = 3) +     xlim(0, 0.3)"},{"path":"/articles/syntenet.html","id":"syntenet-as-a-synteny-detection-tool","dir":"Articles","previous_headings":"","what":"syntenet as a synteny detection tool","title":"Inference and Analysis of Synteny Networks","text":"cases, users want infer synteny network, want identify syntenic regions within single genome two genomes. can accomplished functions intraspecies_synteny() interspecies_synteny(). fact, functions used hood infer_syntenet() infer network. detect synteny, need: list DIAMOND/BLAST data frames returned run_diamond(). intraspecies_synteny(), intraspecies comparisons must included; interspecies_synteny(), interspecies comparisons must included. GRangesList object containing processed annotation species interest, returned process_input(). output intraspecies_synteny() interspecies_synteny() path .collinearity files generated MCScanX (Y. Wang et al. 2012), can read parsed parse_collinearity() function. demonstrate usage intraspecies_synteny(), let’s identify syntenic regions genome Saccharomyces cerevisiae. processed annotation DIAMOND output stored example data sets scerevisiae_annot scerevisiae_diamond. demonstrate usage interspecies_synteny(), let’s detect syntenic regions genomes Ostreococcus lucimarinus Ostreococcus sp RCC809. genomes, already processed annotation DIAMOND list objects pdata blast_list, obtained previous sections vignette. Note parse_collinearity() returns data frame anchor pairs default, can also obtain synteny block information, combination changing argument parameter (check man page ?parse_collinearity details):","code":"# Load data data(scerevisiae_annot) data(scerevisiae_diamond)  # Take a look at the data head(scerevisiae_annot)  #> $Scerevisiae #> GRanges object with 6600 ranges and 1 metadata column: #>          seqnames        ranges strand |          gene #>             <Rle>     <IRanges>  <Rle> |   <character> #>      [1]    Sce_I       335-649      * |   Sce_YAL069W #>      [2]    Sce_I       538-792      * | Sce_YAL068W-A #>      [3]    Sce_I     1807-2169      * |   Sce_YAL068C #>      [4]    Sce_I     2480-2707      * | Sce_YAL067W-A #>      [5]    Sce_I     7235-9016      * |   Sce_YAL067C #>      ...      ...           ...    ... .           ... #>   [6596]  Sce_XVI 939922-941136      * |   Sce_YPR201W #>   [6597]  Sce_XVI 943032-943896      * |   Sce_YPR202W #>   [6598]  Sce_XVI 943880-944188      * |   Sce_YPR203W #>   [6599]  Sce_XVI 944603-947701      * |   Sce_YPR204W #>   [6600]  Sce_XVI 946856-947338      * | Sce_YPR204C-A #>   ------- #>   seqinfo: 17 sequences from an unspecified genome; no seqlengths  names(scerevisiae_diamond) #> [1] \"Scerevisiae_Scerevisiae\" head(scerevisiae_diamond$Scerevisiae_Scerevisiae) #>         query          db perc_identity length mismatches gap_open qstart qend #> 1 Sce_YLR106C Sce_YLR106C         100.0   4910          0        0      1 4910 #> 2 Sce_YKR054C Sce_YKR054C         100.0   4092          0        0      1 4092 #> 3 Sce_YHR099W Sce_YHR099W         100.0   3744          0        0      1 3744 #> 4 Sce_YDR457W Sce_YDR457W         100.0   3268          0        0      1 3268 #> 5 Sce_YDR457W Sce_YER125W          44.1    354        195        3   2913 3266 #> 6 Sce_YDR457W Sce_YJR036C          30.7    378        228       12   2913 3266 #>   tstart tend   evalue bitscore #> 1      1 4910 0.00e+00     9095 #> 2      1 4092 0.00e+00     7940 #> 3      1 3744 0.00e+00     7334 #> 4      1 3268 0.00e+00     6170 #> 5    457  807 2.18e-91      315 #> 6    523  890 7.99e-44      172  # Detect intragenome synteny intra_syn <- intraspecies_synteny(     scerevisiae_diamond, scerevisiae_annot )  intra_syn # see where the .collinearity file is #> [1] \"/tmp/RtmpYTqGvN/intra/Scerevisiae.collinearity\"  # Read .collinearity file scerevisiae_syn <- parse_collinearity(intra_syn) head(scerevisiae_syn) #>       Anchor1       Anchor2 #> 1 Sce_YAR050W   Sce_YHR211W #> 2 Sce_YAR060C   Sce_YHR212C #> 3 Sce_YAR064W Sce_YHR213W-B #> 4 Sce_YAR066W   Sce_YHR214W #> 5 Sce_YAR068W Sce_YHR214W-A #> 6 Sce_YAR069C Sce_YHR214C-D # Keep only interspecies DIAMOND comparisons names(blast_list) #> [1] \"Olucimarinus_Olucimarinus\" \"Olucimarinus_OspRCC809\"    #> [3] \"OspRCC809_Olucimarinus\"    \"OspRCC809_OspRCC809\" diamond_inter <- blast_list[c(2, 3)]  # Double-check if we have processed annotation for these 2 species names(pdata$annotation) #> [1] \"Olucimarinus\" \"OspRCC809\"  # Detect interspecies synteny intersyn <- interspecies_synteny(diamond_inter, pdata$annotation)  intersyn # see where the .collinearity file is #> [1] \"/tmp/RtmpYTqGvN/inter/Olucimarinus_OspRCC809.collinearity\"  # Read .collinearity file ostreoccocus_syn <- parse_collinearity(intersyn) head(ostreoccocus_syn) #>          Anchor1              Anchor2 #> 1 Olu_OL01G00070 Osp_ORCC809_01G06520 #> 2 Olu_OL01G00100 Osp_ORCC809_01G06480 #> 3 Olu_OL01G00130 Osp_ORCC809_01G06440 #> 4 Olu_OL01G00150 Osp_ORCC809_01G06420 #> 5 Olu_OL01G00160 Osp_ORCC809_01G06410 #> 6 Olu_OL01G00170 Osp_ORCC809_01G06400 # 1) Get anchors with `parse_collinearity()` anchors <- parse_collinearity(intra_syn) head(anchors) #>       Anchor1       Anchor2 #> 1 Sce_YAR050W   Sce_YHR211W #> 2 Sce_YAR060C   Sce_YHR212C #> 3 Sce_YAR064W Sce_YHR213W-B #> 4 Sce_YAR066W   Sce_YHR214W #> 5 Sce_YAR068W Sce_YHR214W-A #> 6 Sce_YAR069C Sce_YHR214C-D  # 2) Get synteny block with `parse_collinearity()` blocks <- parse_collinearity(intra_syn, as = \"blocks\") head(blocks) #>   Block Block_score            Chr Orientation #> 1     0         446 Sce_I&Sce_VIII        plus #> 2     1         528   Sce_I&Sce_XV       minus #> 3     2         572  Sce_II&Sce_IV        plus #> 4     3         643   Sce_II&Sce_V       minus #> 5     4         446 Sce_II&Sce_XVI        plus #> 6     5         422 Sce_III&Sce_IV       minus  # 3) Get synteny blocks and anchor pairs in a single data frame all <- parse_collinearity(intra_syn, as = \"all\") head(all) #>   Block Block_score            Chr Orientation     Anchor1       Anchor2 #> 1     0         446 Sce_I&Sce_VIII        plus Sce_YAR050W   Sce_YHR211W #> 2     0         446 Sce_I&Sce_VIII        plus Sce_YAR060C   Sce_YHR212C #> 3     0         446 Sce_I&Sce_VIII        plus Sce_YAR064W Sce_YHR213W-B #> 4     0         446 Sce_I&Sce_VIII        plus Sce_YAR066W   Sce_YHR214W #> 5     0         446 Sce_I&Sce_VIII        plus Sce_YAR068W Sce_YHR214W-A #> 6     0         446 Sce_I&Sce_VIII        plus Sce_YAR069C Sce_YHR214C-D"},{"path":[]},{"path":"/articles/syntenet.html","id":"how-do-i-execute-an-external-dependency-that-is-not-in-my-path","dir":"Articles","previous_headings":"FAQ","what":"How do I execute an external dependency that is not in my PATH?","title":"Inference and Analysis of Synteny Networks","text":"DIAMOND /IQ-TREE installed, directory PATH, can add given directory PATH function Sys.setenv(). example, suppose DIAMOND binary /home/username/bioinfo_tools. add directory PATH, run: Note R PATH system’s PATH. Thus, even add directory /home/username/bioinfo_tools system’s path (e.g., editing ~/.bashrc file Linux), still need update R PATH.","code":"# Add example directory /home/username/bioinfo_tools to PATH Sys.setenv(     PATH = paste(         Sys.getenv(\"PATH\"), \"/home/username/bioinfo_tools\", sep = \":\"     ) )"},{"path":"/articles/syntenet.html","id":"can-i-run-the-diamond-searches-on-the-command-line-and-import-the-results","dir":"Articles","previous_headings":"FAQ","what":"Can I run the DIAMOND searches on the command line and import the results?","title":"Inference and Analysis of Synteny Networks","text":"Yes. case quite common users large amount data want execute DIAMOND similarity search program HPC cluster (submitting job qsub execute Bash script). , follow 3 steps : Export processed sequences (returned process_input()) function export_sequences(). function write sequences FASTA files directory specified outdir parameter. Navigate (.e., cd) directory specified outdir, FASTA files , execute -vs-similarity searches. output files must named “[species]_[species].tsv”, [species] indicates basename FASTA files (e.g., “speciesA” FASTA file named speciesA.fasta). DIAMOND, can use following code (adaptations, prefer): Read output similarity searches list data frames read_diamond() function. input, read_diamond() takes path directory containing DIAMOND/BLAST output files.","code":"#!/bin/bash  # Create output directories `dbs` and `results` mkdir -p dbs mkdir -p results  # 1. Make dbs for each species for seqfile in *.fasta do     dbfile=\"dbs/$(basename \"$seqfile\" .fasta)\"     diamond makedb --in \"$seqfile\" -d \"$dbfile\" --quiet done  # 2. Perform all-vs-all pairwise similarity searches species=( $(basename -s .fasta *.fasta) ) for (( i=0; i<${#species[@]}; i++ )) do     query=\"${species[$i]}.fasta\"     for (( j=0; j<${#species[@]}; j++ ))     do         db=\"dbs/${species[$j]}\"         outfile=\"results/${species[$i]}_${species[$j]}.tsv\"         diamond blastp -q \"$query\" -d \"$db\" -o \"$outfile\" \\           --max-hsps 1 -k 5 --quiet      done done"},{"path":"/articles/syntenet.html","id":"my-sequence-names-do-not-match-gene-ids-in-the-annotation--what-should-i-do","dir":"Articles","previous_headings":"FAQ","what":"My sequence names do not match gene IDs in the annotation. What should I do?","title":"Inference and Analysis of Synteny Networks","text":"names sequences (equivalent FASTA headers) match gene IDs GRanges objects, syntenet throws following error: Sequence names ‘seq’ match gene names ‘annotation’. () cases, error happens users protein IDs sequence names, syntenet looks gene IDs (.e., using rows GRanges objects column type “gene”). case, instance, data obtained NCBI’s RefSeq database. solve issue, need replace protein/transcript IDs gene IDs sequence names, can done function collapse_protein_ids(). demonstrate works, let’s explore example data set containing protein sequences gene annotation obtained RefSeq. data contains information subset 16 genes fish species Alosa alosa, stored extdata/RefSeq_parsing_example directory package. first problem can observe sequence names additional text describing sequences (e.g., “GSK3-beta…”), must IDs. solve issue, can remove whitespace everything comes . Great, removed unnecessary text! However, still problem: sequence names start XP_….. look closer first row annot$Aalosa (contains ranges genes), notice none columns contain XP_… IDs. RefSeq uses IDs CDS, genes. Let’s check can indeed find XP_… IDs rows “CDS” type column. XP_… IDs can found Name column. Note also gene IDs, need syntenet, gene column. collapse protein IDs gene IDs collapse_protein_ids(), need create list 2-column data frames containing correspondence protein IDs gene IDs species. example, can extracting columns Name gene rows represent CDS ranges. Finally, can pass list sequences list ID correspondences collapse_protein_ids(), return list AAStringSet objects gene IDs sequence names. can see, protein IDs replaced gene IDs. multiple proteins gene (.e., different isoforms), function keeps longest sequence (also known protein products primary transcript). way, number sequences never greater number genes, syntenet expects.","code":"# Path to directory containing data data_dir <- system.file(     \"extdata\", \"RefSeq_parsing_example\", package = \"syntenet\" ) dir(data_dir) #> [1] \"Aalosa.fa.gz\"   \"Aalosa.gff3.gz\"  # Reading the files to a format that syntenet understands seqs <- fasta2AAStringSetlist(data_dir) annot <- gff2GRangesList(data_dir)  # Taking a look at the data seqs #> $Aalosa #> AAStringSet object of length 21: #>      width seq                                              names                #>  [1]   189 MTLKMAATMARCFPALVRPLSTR...KRRNWYLNDPYLKYQDRVNPRW XP_048084156.1 39... #>  [2]   348 MNEVNRTRLDTDGVRDISSPRRR...HVPYGIAQKVTHKPSISNTAAK XP_048095207.1 cy... #>  [3]   177 MPQDLPPAAAVPQGSMPPGKMPH...PALRRRARLRRLVTPEPLYAGW XP_048096060.1 un... #>  [4]   176 MPQDLPPAAAVPQGSMPPGKMPH...KERPAGRFYGLPCDAEPVYAGW XP_048096122.1 un... #>  [5]   137 MITKAMEVDYKLEDPKAPLEESS...GYRDAFGNELLRRLERLQQNAQ XP_048099323.1 GS... #>  ...   ... ... #> [17]   224 MGLFGKTSEKPPKDLINEWSLKI...EEEEEEEEDIEEMQTRLAALRS XP_048116262.1 ch... #> [18]   176 MSLVRGIMLSATRSKAWSVGRAS...QVLKNPQADHGCSCGSSFSVKL XP_048117248.1 ir... #> [19]   149 MAIREVCVLLLPLLALAYAEHVK...WELRDDNNKDLFCIKFPVQIVS XP_048117257.1 NP... #> [20]   149 MAIREVCVLLLPLLALAYAEHVK...WELRDDNNKDLFCIKFPVQIVS XP_048117266.1 NP... #> [21]   886 MSTSIGDKIEDFKVLTLLGKGSF...VKEKLQCLSSILGLLAGPAARR XP_048120688.1 LO... head(names(seqs$Aalosa)) #> [1] \"XP_048084156.1 39S ribosomal protein L35, mitochondrial [Alosa alosa]\"          #> [2] \"XP_048095207.1 cytosolic 5'-nucleotidase 1A [Alosa alosa]\"                      #> [3] \"XP_048096060.1 uncharacterized protein si:dkey-21a6.5 isoform X1 [Alosa alosa]\" #> [4] \"XP_048096122.1 uncharacterized protein si:dkey-21a6.5 isoform X2 [Alosa alosa]\" #> [5] \"XP_048099323.1 GSK3-beta interaction protein isoform X1 [Alosa alosa]\"          #> [6] \"XP_048099396.1 GSK3-beta interaction protein isoform X2 [Alosa alosa]\"  annot #> GRangesList object of length 1: #> $Aalosa #> GRanges object with 226 ranges and 19 metadata columns: #>            seqnames        ranges strand |   source     type     score #>               <Rle>     <IRanges>  <Rle> | <factor> <factor> <numeric> #>     [1] NC_063189.1    9524-52877      - |   Gnomon     gene        NA #>     [2] NC_063189.1   52525-52682      - |   Gnomon     CDS         NA #>     [3] NC_063189.1   50374-50600      - |   Gnomon     CDS         NA #>     [4] NC_063189.1   38459-38639      - |   Gnomon     CDS         NA #>     [5] NC_063189.1   31087-31235      - |   Gnomon     CDS         NA #>     ...         ...           ...    ... .      ...      ...       ... #>   [222] NC_063189.1 788729-789007      - |   Gnomon      CDS        NA #>   [223] NC_063189.1 779818-779990      - |   Gnomon      CDS        NA #>   [224] NC_063189.1 778802-778982      - |   Gnomon      CDS        NA #>   [225] NC_063189.1 777663-778010      - |   Gnomon      CDS        NA #>   [226] NC_063189.1 777553-777626      - |   Gnomon      CDS        NA #>             phase                 ID                                  Dbxref #>         <integer>        <character>                         <CharacterList> #>     [1]      <NA>       gene-noxred1                        GeneID:125303464 #>     [2]         0 cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 #>     [3]         1 cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 #>     [4]         2 cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 #>     [5]         1 cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 #>     ...       ...                ...                                     ... #>   [222]         2 cds-XP_048105503.1 GeneID:125298741,Genbank:XP_048105503.1 #>   [223]         2 cds-XP_048105503.1 GeneID:125298741,Genbank:XP_048105503.1 #>   [224]         0 cds-XP_048105503.1 GeneID:125298741,Genbank:XP_048105503.1 #>   [225]         2 cds-XP_048105503.1 GeneID:125298741,Genbank:XP_048105503.1 #>   [226]         2 cds-XP_048105503.1 GeneID:125298741,Genbank:XP_048105503.1 #>                   Name       gbkey         gene   gene_biotype     partial #>            <character> <character>  <character>    <character> <character> #>     [1]        noxred1        Gene      noxred1 protein_coding        true #>     [2] XP_048113188.1         CDS      noxred1           <NA>        true #>     [3] XP_048113188.1         CDS      noxred1           <NA>        true #>     [4] XP_048113188.1         CDS      noxred1           <NA>        true #>     [5] XP_048113188.1         CDS      noxred1           <NA>        true #>     ...            ...         ...          ...            ...         ... #>   [222] XP_048105503.1         CDS LOC125298741           <NA>        <NA> #>   [223] XP_048105503.1         CDS LOC125298741           <NA>        <NA> #>   [224] XP_048105503.1         CDS LOC125298741           <NA>        <NA> #>   [225] XP_048105503.1         CDS LOC125298741           <NA>        <NA> #>   [226] XP_048105503.1         CDS LOC125298741           <NA>        <NA> #>             start_range             Parent                   Note #>         <CharacterList>    <CharacterList>        <CharacterList> #>     [1]          .,9524                                           #>     [2]                 rna-XM_048257231.1 The sequence of the .. #>     [3]                 rna-XM_048257231.1 The sequence of the .. #>     [4]                 rna-XM_048257231.1 The sequence of the .. #>     [5]                 rna-XM_048257231.1 The sequence of the .. #>     ...             ...                ...                    ... #>   [222]                 rna-XM_048249546.1                        #>   [223]                 rna-XM_048249546.1                        #>   [224]                 rna-XM_048249546.1                        #>   [225]                 rna-XM_048249546.1                        #>   [226]                 rna-XM_048249546.1                        #>                      exception              inference                product #>                    <character>            <character>            <character> #>     [1]                   <NA>                   <NA>                   <NA> #>     [2] annotated by transcr.. similar to RNA seque.. NADP-dependent oxido.. #>     [3] annotated by transcr.. similar to RNA seque.. NADP-dependent oxido.. #>     [4] annotated by transcr.. similar to RNA seque.. NADP-dependent oxido.. #>     [5] annotated by transcr.. similar to RNA seque.. NADP-dependent oxido.. #>     ...                    ...                    ...                    ... #>   [222]                   <NA>                   <NA> fibroblast growth fa.. #>   [223]                   <NA>                   <NA> fibroblast growth fa.. #>   [224]                   <NA>                   <NA> fibroblast growth fa.. #>   [225]                   <NA>                   <NA> fibroblast growth fa.. #>   [226]                   <NA>                   <NA> fibroblast growth fa.. #>             protein_id transl_except #>            <character>   <character> #>     [1]           <NA>          <NA> #>     [2] XP_048113188.1          <NA> #>     [3] XP_048113188.1          <NA> #>     [4] XP_048113188.1          <NA> #>     [5] XP_048113188.1          <NA> #>     ...            ...           ... #>   [222] XP_048105503.1          <NA> #>   [223] XP_048105503.1          <NA> #>   [224] XP_048105503.1          <NA> #>   [225] XP_048105503.1          <NA> #>   [226] XP_048105503.1          <NA> #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths # Remove whitespace and everything after it names(seqs$Aalosa) <- gsub(\" .*\", \"\", names(seqs$Aalosa))  # Taking a look at the new names head(names(seqs$Aalosa)) #> [1] \"XP_048084156.1\" \"XP_048095207.1\" \"XP_048096060.1\" \"XP_048096122.1\" #> [5] \"XP_048099323.1\" \"XP_048099396.1\" # Show only rows for which `type` is \"CDS\" head(annot$Aalosa[annot$Aalosa$type == \"CDS\"]) #> GRanges object with 6 ranges and 19 metadata columns: #>          seqnames        ranges strand |   source     type     score     phase #>             <Rle>     <IRanges>  <Rle> | <factor> <factor> <numeric> <integer> #>   [1] NC_063189.1   52525-52682      - |   Gnomon      CDS        NA         0 #>   [2] NC_063189.1   50374-50600      - |   Gnomon      CDS        NA         1 #>   [3] NC_063189.1   38459-38639      - |   Gnomon      CDS        NA         2 #>   [4] NC_063189.1   31087-31235      - |   Gnomon      CDS        NA         1 #>   [5] NC_063189.1     9524-9713      - |   Gnomon      CDS        NA         2 #>   [6] NC_063189.1 229429-229590      - |   Gnomon      CDS        NA         0 #>                       ID                                  Dbxref           Name #>              <character>                         <CharacterList>    <character> #>   [1] cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 XP_048113188.1 #>   [2] cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 XP_048113188.1 #>   [3] cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 XP_048113188.1 #>   [4] cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 XP_048113188.1 #>   [5] cds-XP_048113188.1 GeneID:125303464,Genbank:XP_048113188.1 XP_048113188.1 #>   [6] cds-XP_048105299.1 GeneID:125298558,Genbank:XP_048105299.1 XP_048105299.1 #>             gbkey        gene gene_biotype     partial     start_range #>       <character> <character>  <character> <character> <CharacterList> #>   [1]         CDS     noxred1         <NA>        true                 #>   [2]         CDS     noxred1         <NA>        true                 #>   [3]         CDS     noxred1         <NA>        true                 #>   [4]         CDS     noxred1         <NA>        true                 #>   [5]         CDS     noxred1         <NA>        true          .,9524 #>   [6]         CDS       atg2b         <NA>        <NA>                 #>                   Parent                   Note              exception #>          <CharacterList>        <CharacterList>            <character> #>   [1] rna-XM_048257231.1 The sequence of the .. annotated by transcr.. #>   [2] rna-XM_048257231.1 The sequence of the .. annotated by transcr.. #>   [3] rna-XM_048257231.1 The sequence of the .. annotated by transcr.. #>   [4] rna-XM_048257231.1 The sequence of the .. annotated by transcr.. #>   [5] rna-XM_048257231.1 The sequence of the .. annotated by transcr.. #>   [6] rna-XM_048249342.1 The sequence of the .. unclassified transla.. #>                    inference                product     protein_id #>                  <character>            <character>    <character> #>   [1] similar to RNA seque.. NADP-dependent oxido.. XP_048113188.1 #>   [2] similar to RNA seque.. NADP-dependent oxido.. XP_048113188.1 #>   [3] similar to RNA seque.. NADP-dependent oxido.. XP_048113188.1 #>   [4] similar to RNA seque.. NADP-dependent oxido.. XP_048113188.1 #>   [5] similar to RNA seque.. NADP-dependent oxido.. XP_048113188.1 #>   [6]                   <NA> LOW QUALITY PROTEIN:.. XP_048105299.1 #>       transl_except #>         <character> #>   [1]          <NA> #>   [2]          <NA> #>   [3]          <NA> #>   [4]          <NA> #>   [5]          <NA> #>   [6]          <NA> #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths # Create a list of data frames containing protein-to-gene ID correspondences protein2gene <- lapply(annot, function(x) {          # Extract only CDS ranges     cds_ranges <- x[x$type == \"CDS\"]          # Create the ID correspondence data frame     df <- data.frame(         protein_id = cds_ranges$Name,         gene_id = cds_ranges$gene     )          # Remove duplicate rows     df <- df[!duplicated(df$protein_id), ]          return(df) })  # Taking a look at the list protein2gene #> $Aalosa #>         protein_id        gene_id #> 1   XP_048113188.1        noxred1 #> 6   XP_048105299.1          atg2b #> 47  XP_048099323.1   LOC125294505 #> 50  XP_048099476.1   LOC125294505 #> 52  XP_048099396.1   LOC125294505 #> 54  XP_048099557.1   LOC125294505 #> 56  XP_048117257.1   LOC125306123 #> 60  XP_048117266.1   LOC125306123 #> 64  XP_048117248.1          isca2 #> 68  XP_048105318.1           eml5 #> 119 XP_048103211.1         itpk1b #> 130 XP_048115651.1   LOC125305081 #> 132 XP_048120688.1           plk4 #> 149 XP_048105359.1         hspa4l #> 168 XP_048116262.1          chmp3 #> 176 XP_048111661.1          reep1 #> 183 XP_048084156.1         mrpl35 #> 187 XP_048096060.1 si:dkey-21a6.5 #> 192 XP_048096122.1 si:dkey-21a6.5 #> 197 XP_048095207.1        nt5c1ab #> 203 XP_048105503.1   LOC125298741 # Collapse protein IDs to gene IDs in list of sequences new_seq <- collapse_protein_ids(seqs, protein2gene)  # Looking at the new sequences new_seq #> $Aalosa #> AAStringSet object of length 16: #>      width seq                                              names                #>  [1]  1946 MADRTAPNCHLRLEWVYGYRGHQ...YVISAGGDDRSLFVWKCVHTPH eml5 #>  [2]  1882 MPWPFSESIKKRACRYLLHRYLG...MRNQIQPDARQEETQKWRLGEE atg2b #>  [3]   886 MSTSIGDKIEDFKVLTLLGKGSF...VKEKLQCLSSILGLLAGPAARR plk4 #>  [4]   769 MSVVGFDVGFQNCYIAVARSGGI...GGDAKSGGSSHQPAAPGEMEVE hspa4l #>  [5]   480 MAAPAYVFGQKVWLSARISPLRV...HTHTHAHLESKVHQHQHIHFQC LOC125298741 #>  ...   ... ... #> [12]   189 MTLKMAATMARCFPALVRPLSTR...KRRNWYLNDPYLKYQDRVNPRW mrpl35 #> [13]   177 MPQDLPPAAAVPQGSMPPGKMPH...PALRRRARLRRLVTPEPLYAGW si:dkey-21a6.5 #> [14]   176 MSLVRGIMLSATRSKAWSVGRAS...QVLKNPQADHGCSCGSSFSVKL isca2 #> [15]   149 MAIREVCVLLLPLLALAYAEHVK...WELRDDNNKDLFCIKFPVQIVS LOC125306123 #> [16]   137 MITKAMEVDYKLEDPKAPLEESS...GYRDAFGNELLRRLERLQQNAQ LOC125294505"},{"path":"/articles/syntenet.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Inference and Analysis of Synteny Networks","text":"document created following conditions:","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggtree_3.10.1    syntenet_1.7.1   BiocStyle_2.30.0 #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7                rlang_1.1.3                 #>   [3] magrittr_2.0.3              matrixStats_1.3.0           #>   [5] compiler_4.3.3              mgcv_1.9-1                  #>   [7] systemfonts_1.0.6           vctrs_0.6.5                 #>   [9] pkgconfig_2.0.3             crayon_1.5.2                #>  [11] fastmap_1.1.1               XVector_0.42.0              #>  [13] labeling_0.4.3              utf8_1.2.4                  #>  [15] Rsamtools_2.18.0            rmarkdown_2.26              #>  [17] ragg_1.3.0                  network_1.18.2              #>  [19] purrr_1.0.2                 xfun_0.43                   #>  [21] zlibbioc_1.48.2             cachem_1.0.8                #>  [23] aplot_0.2.2                 GenomeInfoDb_1.38.8         #>  [25] jsonlite_1.8.8              highr_0.10                  #>  [27] DelayedArray_0.28.0         BiocParallel_1.36.0         #>  [29] parallel_4.3.3              cluster_2.1.6               #>  [31] R6_2.5.1                    bslib_0.7.0                 #>  [33] RColorBrewer_1.1-3          rtracklayer_1.62.0          #>  [35] GenomicRanges_1.54.1        jquerylib_0.1.4             #>  [37] Rcpp_1.0.12                 bookdown_0.39               #>  [39] SummarizedExperiment_1.32.0 knitr_1.46                  #>  [41] IRanges_2.36.0              Matrix_1.6-5                #>  [43] splines_4.3.3               igraph_2.0.3                #>  [45] tidyselect_1.2.1            abind_1.4-5                 #>  [47] yaml_2.3.8                  codetools_0.2-20            #>  [49] lattice_0.22-6              tibble_3.2.1                #>  [51] treeio_1.26.0               Biobase_2.62.0              #>  [53] withr_3.0.0                 coda_0.19-4.1               #>  [55] evaluate_0.23               Rtsne_0.17                  #>  [57] gridGraphics_0.5-1          desc_1.4.3                  #>  [59] Biostrings_2.70.3           pillar_1.9.0                #>  [61] BiocManager_1.30.22         MatrixGenerics_1.14.0       #>  [63] stats4_4.3.3                ggfun_0.1.4                 #>  [65] generics_0.1.3              RCurl_1.98-1.14             #>  [67] S4Vectors_0.40.2            ggplot2_3.5.0               #>  [69] munsell_0.5.1               scales_1.3.0                #>  [71] tidytree_0.4.6              ggnetwork_0.5.13            #>  [73] glue_1.7.0                  pheatmap_1.0.12             #>  [75] lazyeval_0.2.2              tools_4.3.3                 #>  [77] BiocIO_1.12.0               GenomicAlignments_1.38.2    #>  [79] fs_1.6.3                    XML_3.99-0.16.1             #>  [81] grid_4.3.3                  tidyr_1.3.1                 #>  [83] ape_5.8                     colorspace_2.1-0            #>  [85] patchwork_1.2.0             nlme_3.1-164                #>  [87] networkD3_0.4               GenomeInfoDbData_1.2.11     #>  [89] restfulr_0.0.15             cli_3.6.2                   #>  [91] intergraph_2.0-4            textshaping_0.3.7           #>  [93] labdsv_2.1-0                fansi_1.0.6                 #>  [95] S4Arrays_1.2.1              dplyr_1.1.4                 #>  [97] gtable_0.3.5                yulab.utils_0.1.4           #>  [99] sass_0.4.9                  digest_0.6.35               #> [101] BiocGenerics_0.48.1         ggplotify_0.1.2             #> [103] SparseArray_1.2.4           rjson_0.2.21                #> [105] htmlwidgets_1.6.4           farver_2.1.1                #> [107] memoise_2.0.1               htmltools_0.5.8.1           #> [109] pkgdown_2.0.9               lifecycle_1.0.4             #> [111] statnet.common_4.9.0        MASS_7.3-60.0.1"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Tao Zhao. Author. Kristian K Ullrich. Author. Yves Van de Peer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva, F., Zhao, T., Ullrich, K.K., Schranz, M.E. Van de Peer, Y. syntenet: R/Bioconductor package inference analysis synteny networks. Bioinformatics, 39(1), p.btac806. (2023). https://doi.org/10.1093/bioinformatics/btac806","code":"@Article{,   title = {syntenet: an R/Bioconductor package for the inference and analysis of synteny networks},   author = {Fabricio Almeida-Silva and Tao Zhao and Kristian K. Ullrich and M. Eric Schranz and Yves {Van de Peer}},   journal = {Bioinformatics},   year = {2023},   volume = {39},   number = {1},   pages = {btac806},   url = {https://academic.oup.com/bioinformatics/article/39/1/btac806/6947985},   doi = {10.1093/bioinformatics/btac806}, }"},{"path":"/index.html","id":"syntenet-","dir":"","previous_headings":"","what":"Inference And Analysis Of Synteny Networks","title":"Inference And Analysis Of Synteny Networks","text":"goal syntenet infer synteny networks whole-genome protein sequence data analyze . Anchor pairs synteny analyses treated undirected unweighted graph (.e., synteny network), users can perform: Synteny detection using native implementation MCScanX algorithm, C++ program modified ported R Rcpp. way, users need install MCScanX beforehand, syntenet implementation algorithm. Synteny network inference treating anchor pairs edges graph; Network clustering using Infomap algorithm; Phylogenomic profiling, consists identifying species contain clusters. analysis can reveal highly conserved synteny clusters taxon-specific ones (e.g., family- order-specific clusters); Microsynteny-based phylogeny reconstruction maximum likelihood, can achieved inferring phylogeny binary matrix phylogenomic profiles IQTREE.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Inference And Analysis Of Synteny Networks","text":"Get latest stable R release CRAN. install syntenet Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"syntenet\") BiocManager::install(\"almeidasilvaf/syntenet\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Inference And Analysis Of Synteny Networks","text":"citation output using citation('syntenet') R. Please run check updates cite syntenet. Please note syntenet made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('syntenet'), bibtex = TRUE) #>  #> To cite syntenet in publications, use: #>  #>   Almeida-Silva, F., Zhao, T., Ullrich, K.K., Schranz, M.E. and Van de #>   Peer, Y. syntenet: an R/Bioconductor package for the inference and #>   analysis of synteny networks. Bioinformatics, 39(1), p.btac806. #>   (2023). https://doi.org/10.1093/bioinformatics/btac806 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {syntenet: an R/Bioconductor package for the inference and analysis of synteny networks}, #>     author = {Fabricio Almeida-Silva and Tao Zhao and Kristian K. Ullrich and M. Eric Schranz and Yves {Van de Peer}}, #>     journal = {Bioinformatics}, #>     year = {2023}, #>     volume = {39}, #>     number = {1}, #>     pages = {btac806}, #>     url = {https://academic.oup.com/bioinformatics/article/39/1/btac806/6947985}, #>     doi = {10.1093/bioinformatics/btac806}, #>   }"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Inference And Analysis Of Synteny Networks","text":"Please note syntenet project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Inference And Analysis Of Synteny Networks","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"/reference/angiosperm_phylogeny.html","id":null,"dir":"Reference","previous_headings":"","what":"Microsynteny-based angiosperm phylogeny. — angiosperm_phylogeny","title":"Microsynteny-based angiosperm phylogeny. — angiosperm_phylogeny","text":"Original tree file obtained Zhao et al., 2021. tree object class 'phylo', can created reading tree file treeio::read.tree().","code":""},{"path":"/reference/angiosperm_phylogeny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microsynteny-based angiosperm phylogeny. — angiosperm_phylogeny","text":"","code":"data(angiosperm_phylogeny)"},{"path":"/reference/angiosperm_phylogeny.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Microsynteny-based angiosperm phylogeny. — angiosperm_phylogeny","text":"object class 'phylo'.","code":""},{"path":"/reference/angiosperm_phylogeny.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Microsynteny-based angiosperm phylogeny. — angiosperm_phylogeny","text":"Zhao, T., Zwaenepoel, ., Xue, J. Y., Kao, S. M., Li, Z., Schranz, M. E., & Van de Peer, Y. (2021). Whole-genome microsynteny-based phylogeny angiosperms. Nature Communications, 12(1), 1-14.","code":""},{"path":"/reference/angiosperm_phylogeny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microsynteny-based angiosperm phylogeny. — angiosperm_phylogeny","text":"","code":"data(angiosperm_phylogeny)"},{"path":"/reference/annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtered genome annotation for Ostreococcus sp. species — annotation","title":"Filtered genome annotation for Ostreococcus sp. species — annotation","text":"Data obtained Pico-PLAZA 3.0. annotation data primary transcripts included, genes chromosomes 1, 2, 3.","code":""},{"path":"/reference/annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtered genome annotation for Ostreococcus sp. species — annotation","text":"","code":"data(annotation)"},{"path":"/reference/annotation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Filtered genome annotation for Ostreococcus sp. species — annotation","text":"CompressedGRangesList containing elements Olucimarinus, Osp_RCC809, Otauri.","code":""},{"path":"/reference/annotation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filtered genome annotation for Ostreococcus sp. species — annotation","text":"Van Bel, M., Silvestri, F., Weitz, E. M., Kreft, L., Botzki, ., Coppens, F., & Vandepoele, K. (2021). PLAZA 5.0: extending scope power comparative functional genomics plants. Nucleic acids research.","code":""},{"path":"/reference/annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtered genome annotation for Ostreococcus sp. species — annotation","text":"","code":"data(annotation)"},{"path":"/reference/binarize_and_transpose.html","id":null,"dir":"Reference","previous_headings":"","what":"Binarize and transpose the phylogenomic profile matrix — binarize_and_transpose","title":"Binarize and transpose the phylogenomic profile matrix — binarize_and_transpose","text":"Binarize transpose phylogenomic profile matrix","code":""},{"path":"/reference/binarize_and_transpose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binarize and transpose the phylogenomic profile matrix — binarize_and_transpose","text":"","code":"binarize_and_transpose(profile_matrix = NULL)"},{"path":"/reference/binarize_and_transpose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binarize and transpose the phylogenomic profile matrix — binarize_and_transpose","text":"profile_matrix matrix phylogenomic profiles obtained phylogenomic_profile.","code":""},{"path":"/reference/binarize_and_transpose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binarize and transpose the phylogenomic profile matrix — binarize_and_transpose","text":"binary transposed version profiles matrix.","code":""},{"path":"/reference/binarize_and_transpose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binarize and transpose the phylogenomic profile matrix — binarize_and_transpose","text":"","code":"data(clusters) profile_matrix <- phylogenomic_profile(clusters) tmat <- binarize_and_transpose(profile_matrix)"},{"path":"/reference/blast_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List of data frames containing BLAST-like tabular output — blast_list","title":"List of data frames containing BLAST-like tabular output — blast_list","text":"object created running run_diamond protein sequences Ostreococcus algae available proteomes example data. Hits <50% identity filtered . Code recreate data available script/ subdirectory.","code":""},{"path":"/reference/blast_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of data frames containing BLAST-like tabular output — blast_list","text":"","code":"data(blast_list)"},{"path":"/reference/blast_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of data frames containing BLAST-like tabular output — blast_list","text":"list data frames containing pairwise comparisons proteomes Ostreococcus species.","code":""},{"path":"/reference/blast_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of data frames containing BLAST-like tabular output — blast_list","text":"","code":"data(blast_list)"},{"path":"/reference/check_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if input objects are ready for further analyses — check_input","title":"Check if input objects are ready for further analyses — check_input","text":"Check input objects ready analyses","code":""},{"path":"/reference/check_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if input objects are ready for further analyses — check_input","text":"","code":"check_input(seq = NULL, annotation = NULL, gene_field = \"gene_id\")"},{"path":"/reference/check_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if input objects are ready for further analyses — check_input","text":"seq list AAStringSet objects, list element containing protein sequences given species. list must names (NULL), names list element must match names list elements annotation. annotation GRangesList, CompressedGRangesList, list GRanges annotation sequences seq. list must names (NULL), names list element must match names list elements seq. gene_field Character, name column GRanges objects contains gene IDs. Default: \"gene_id\".","code":""},{"path":"/reference/check_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if input objects are ready for further analyses — check_input","text":"TRUE objects pass check.","code":""},{"path":"/reference/check_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if input objects are ready for further analyses — check_input","text":"function checks input data 3 required conditions: Names seq list (.e., names(seq)) match names annotation GRangesList/CompressedGRangesList (.e., names(annotation)) species (list elements), number sequences seq greater number genes annotation. way ensure users input translated sequences multiple isoforms gene (generated alternative splicing). Ideally, number sequences seq equal number genes annotation, may always stand true non-protein-coding genes. species, sequence names (.e., names(seq[[x]]), equivalent FASTA headers) match gene names annotation.","code":""},{"path":"/reference/check_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if input objects are ready for further analyses — check_input","text":"","code":"data(annotation)  data(proteomes) check_input(proteomes, annotation) #> [1] TRUE"},{"path":"/reference/cluster_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster the synteny network using the Infomap algorithm — cluster_network","title":"Cluster the synteny network using the Infomap algorithm — cluster_network","text":"Cluster synteny network using Infomap algorithm","code":""},{"path":"/reference/cluster_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster the synteny network using the Infomap algorithm — cluster_network","text":"","code":"cluster_network(   network = NULL,   clust_function = igraph::cluster_infomap,   clust_params = NULL )"},{"path":"/reference/cluster_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster the synteny network using the Infomap algorithm — cluster_network","text":"network network represented edge list, 2-column data frame node 1 first column node 2 second column. synteny network, node 1 node anchor pairs. clust_function Function used cluster network. must one functions cluster_* family igraph package (e.g., cluster_infomap, cluster_leiden, etc). Default: igraph::cluster_infomap. clust_params list additional parameters () passed igraph clustering function. Default: NULL (additional parameters).","code":""},{"path":"/reference/cluster_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster the synteny network using the Infomap algorithm — cluster_network","text":"2-column data frame following variables: Gene Gene ID. Cluster Cluster ID identified infomap.","code":""},{"path":"/reference/cluster_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster the synteny network using the Infomap algorithm — cluster_network","text":"","code":"data(network) clusters <- cluster_network(network[1:500, ])"},{"path":"/reference/clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Synteny network clusters of BUSCO genes for 25 eudicot species — clusters","title":"Synteny network clusters of BUSCO genes for 25 eudicot species — clusters","text":"Data obtained Zhao & Schranz, 2019.","code":""},{"path":"/reference/clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synteny network clusters of BUSCO genes for 25 eudicot species — clusters","text":"","code":"data(clusters)"},{"path":"/reference/clusters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synteny network clusters of BUSCO genes for 25 eudicot species — clusters","text":"2-column data frame containing following variables: Gene Gene ID Cluster Cluster ID","code":""},{"path":"/reference/clusters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synteny network clusters of BUSCO genes for 25 eudicot species — clusters","text":"Zhao, T., & Schranz, M. E. (2019). Network-based microsynteny analysis identifies major differences genomic outliers mammalian angiosperm genomes. Proceedings National Academy Sciences, 116(6), 2165-2174.","code":""},{"path":"/reference/clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synteny network clusters of BUSCO genes for 25 eudicot species — clusters","text":"","code":"data(clusters)"},{"path":"/reference/collapse_protein_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","title":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","text":"function can used sequence names AAStringSet objects contain protein IDs instead gene IDs (syntenet requires)","code":""},{"path":"/reference/collapse_protein_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","text":"","code":"collapse_protein_ids(seq, protein2gene = NULL)"},{"path":"/reference/collapse_protein_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","text":"seq list AAStringSet objects, list element containing protein sequences given species. list must names (NULL), names list element must match names list elements protein2gene. protein2gene list 2-column data frames containing protein--gene ID correspondences, first column contains protein IDs, second column contains gene IDs. Names list elements must match names seq.","code":""},{"path":"/reference/collapse_protein_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","text":"list AAStringSet objects seq, protein IDs replaced gene IDs.","code":""},{"path":"/reference/collapse_protein_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","text":"species, function replace protein IDs sequence names gene IDs using protein--gene correspondence table protein2gene. replacing protein IDs gene IDs, multiple sequences gene ID (indicating different isoforms gene), longest sequence kept, number sequences greater number genes.","code":""},{"path":"/reference/collapse_protein_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse protein IDs into gene IDs in sequence names of AAStringSet objects — collapse_protein_ids","text":"","code":"# Load data seq_path <- system.file(     \"extdata\", \"RefSeq_parsing_example\", package = \"syntenet\" ) seq <- fasta2AAStringSetlist(seq_path) annot <- gff2GRangesList(seq_path)  # Clean sequence names names(seq$Aalosa) <- gsub(\" .*\", \"\", names(seq$Aalosa))  # Create a correspondence data frame cor_df <- as.data.frame(annot$Aalosa[annot$Aalosa$type == \"CDS\", ]) cor_df <- cor_df[, c(\"Name\", \"gene\")]  # Create a list of correspondence data frames protein2gene <- list(Aalosa = cor_df)  # Collapse IDs new_seqs <- collapse_protein_ids(seq, protein2gene)"},{"path":"/reference/create_species_id_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of species IDs (3-5-character abbreviations) — create_species_id_table","title":"Create a data frame of species IDs (3-5-character abbreviations) — create_species_id_table","text":"Create data frame species IDs (3-5-character abbreviations)","code":""},{"path":"/reference/create_species_id_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of species IDs (3-5-character abbreviations) — create_species_id_table","text":"","code":"create_species_id_table(species_names)"},{"path":"/reference/create_species_id_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of species IDs (3-5-character abbreviations) — create_species_id_table","text":"species_names character vector names extracted seq annotation lists, can extracted names(seq) names(annotation).","code":""},{"path":"/reference/create_species_id_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of species IDs (3-5-character abbreviations) — create_species_id_table","text":"2-column data frame following variables: species_id Character, species ID consisting 3-5 characters. species_name Character, original names passed input.","code":""},{"path":"/reference/create_species_id_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame of species IDs (3-5-character abbreviations) — create_species_id_table","text":"","code":"# Load 'seq' list (list of AAStringSet objects) data(proteomes)  # Create ID table create_species_id_table(names(proteomes)) #>   species_id species_name #> 1        Olu Olucimarinus #> 2        Osp    OspRCC809"},{"path":"/reference/diamond_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if DIAMOND is installed — diamond_is_installed","title":"Check if DIAMOND is installed — diamond_is_installed","text":"Check DIAMOND installed","code":""},{"path":"/reference/diamond_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if DIAMOND is installed — diamond_is_installed","text":"","code":"diamond_is_installed()"},{"path":"/reference/diamond_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if DIAMOND is installed — diamond_is_installed","text":"Logical indicating whether DIAMOND installed .","code":""},{"path":"/reference/diamond_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if DIAMOND is installed — diamond_is_installed","text":"","code":"diamond_is_installed() #> [1] TRUE"},{"path":"/reference/edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Synteny network of Ostreococcus genomes represented as an edge list — edges","title":"Synteny network of Ostreococcus genomes represented as an edge list — edges","text":"object created running infer_syntenet blast_list example data. Code recreate data set available script/ subdirectory.","code":""},{"path":"/reference/edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synteny network of Ostreococcus genomes represented as an edge list — edges","text":"","code":"data(edges)"},{"path":"/reference/edges.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synteny network of Ostreococcus genomes represented as an edge list — edges","text":"data frame containing anchor pairs two Ostreococcus proteomes.","code":""},{"path":"/reference/edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synteny network of Ostreococcus genomes represented as an edge list — edges","text":"","code":"data(edges)"},{"path":"/reference/export_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Export processed sequences as FASTA files — export_sequences","title":"Export processed sequences as FASTA files — export_sequences","text":"Export processed sequences FASTA files","code":""},{"path":"/reference/export_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export processed sequences as FASTA files — export_sequences","text":"","code":"export_sequences(seq = NULL, outdir = tempdir())"},{"path":"/reference/export_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export processed sequences as FASTA files — export_sequences","text":"seq processed list AAStringSet objects returned process_input(). outdir Path output directory FASTA files stored.","code":""},{"path":"/reference/export_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export processed sequences as FASTA files — export_sequences","text":"Path exported FASTA files.","code":""},{"path":"/reference/export_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export processed sequences as FASTA files — export_sequences","text":"","code":"# Load data data(proteomes) data(annotation)  # Process data pdata <- process_input(proteomes, annotation)  # Export data outdir <- file.path(tempdir(), \"example_test\") export_sequences(pdata$seq, outdir) #> [1] \"/tmp/RtmpNS1OhZ/example_test/Olucimarinus.fasta\" #> [2] \"/tmp/RtmpNS1OhZ/example_test/OspRCC809.fasta\""},{"path":"/reference/fasta2AAStringSetlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Read FASTA files in a directory as a list of AAStringSet objects — fasta2AAStringSetlist","title":"Read FASTA files in a directory as a list of AAStringSet objects — fasta2AAStringSetlist","text":"Read FASTA files directory list AAStringSet objects","code":""},{"path":"/reference/fasta2AAStringSetlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read FASTA files in a directory as a list of AAStringSet objects — fasta2AAStringSetlist","text":"","code":"fasta2AAStringSetlist(fasta_dir)"},{"path":"/reference/fasta2AAStringSetlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read FASTA files in a directory as a list of AAStringSet objects — fasta2AAStringSetlist","text":"fasta_dir Character indicating path directory containing FASTA files.","code":""},{"path":"/reference/fasta2AAStringSetlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read FASTA files in a directory as a list of AAStringSet objects — fasta2AAStringSetlist","text":"list AAStringSet objects, element represents different FASTA file.","code":""},{"path":"/reference/fasta2AAStringSetlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read FASTA files in a directory as a list of AAStringSet objects — fasta2AAStringSetlist","text":"","code":"fasta_dir <- system.file(\"extdata\", \"sequences\", package = \"syntenet\") aastringsetlist <- fasta2AAStringSetlist(fasta_dir)"},{"path":"/reference/find_GS_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Find group-specific clusters based on user-defined species classification — find_GS_clusters","title":"Find group-specific clusters based on user-defined species classification — find_GS_clusters","text":"Find group-specific clusters based user-defined species classification","code":""},{"path":"/reference/find_GS_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find group-specific clusters based on user-defined species classification — find_GS_clusters","text":"","code":"find_GS_clusters(   profile_matrix = NULL,   species_annotation = NULL,   min_percentage = 50 )"},{"path":"/reference/find_GS_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find group-specific clusters based on user-defined species classification — find_GS_clusters","text":"profile_matrix matrix phylogenomic profiles obtained phylogenomic_profile. species_annotation 2-column data frame species IDs first column (column names profile matrix), species annotation (e.g., higher-level taxonomic information) second column. min_percentage Numeric scalar minimum percentage species group consider group specificity. instance, given cluster present 1 group species, less min_percentage species group, considered group-specific cluster. filtering criterion useful differentiate group-specific clusters (e.g., family-specific) subgroup-specific clusters (e.g., genus-specific). Default: 50.","code":""},{"path":"/reference/find_GS_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find group-specific clusters based on user-defined species classification — find_GS_clusters","text":"data frame following variables: Group group species cluster specific. Percentage Percentage species group represented cluster. Cluster Cluster ID.","code":""},{"path":"/reference/find_GS_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find group-specific clusters based on user-defined species classification — find_GS_clusters","text":"","code":"data(clusters) profile_matrix <- phylogenomic_profile(clusters)  # Species annotation species_order <- c(     \"vra\", \"van\", \"pvu\", \"gma\", \"cca\", \"tpr\", \"mtr\", \"adu\", \"lja\",     \"Lang\", \"car\", \"pmu\", \"ppe\", \"pbr\", \"mdo\", \"roc\", \"fve\",     \"Mnot\", \"Zjuj\", \"hlu\", \"jcu\", \"mes\", \"rco\", \"lus\", \"ptr\" ) species_annotation <- data.frame(    Species = species_order,    Family = c(rep(\"Fabaceae\", 11), rep(\"Rosaceae\", 6),               \"Moraceae\", \"Ramnaceae\", \"Cannabaceae\",                rep(\"Euphorbiaceae\", 3), \"Linaceae\", \"Salicaceae\") ) gs_clusters <- find_GS_clusters(profile_matrix, species_annotation)"},{"path":"/reference/gff2GRangesList.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GFF/GTF files in a directory as a GRangesList object — gff2GRangesList","title":"Read GFF/GTF files in a directory as a GRangesList object — gff2GRangesList","text":"Read GFF/GTF files directory GRangesList object","code":""},{"path":"/reference/gff2GRangesList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GFF/GTF files in a directory as a GRangesList object — gff2GRangesList","text":"","code":"gff2GRangesList(gff_dir)"},{"path":"/reference/gff2GRangesList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GFF/GTF files in a directory as a GRangesList object — gff2GRangesList","text":"gff_dir Character indicating path directory containing GFF/GTF files.","code":""},{"path":"/reference/gff2GRangesList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GFF/GTF files in a directory as a GRangesList object — gff2GRangesList","text":"GRangesList object, element represents different GFF/GTF file.","code":""},{"path":"/reference/gff2GRangesList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GFF/GTF files in a directory as a GRangesList object — gff2GRangesList","text":"","code":"gff_dir <- system.file(\"extdata\", \"annotation\", package = \"syntenet\") grangeslist <- gff2GRangesList(gff_dir)"},{"path":"/reference/infer_microsynteny_phylogeny.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer microsynteny-based phylogeny with IQTREE — infer_microsynteny_phylogeny","title":"Infer microsynteny-based phylogeny with IQTREE — infer_microsynteny_phylogeny","text":"Infer microsynteny-based phylogeny IQTREE","code":""},{"path":"/reference/infer_microsynteny_phylogeny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer microsynteny-based phylogeny with IQTREE — infer_microsynteny_phylogeny","text":"","code":"infer_microsynteny_phylogeny(   transposed_profiles = NULL,   bootr = 1000,   alrtboot = 1000,   threads = \"AUTO\",   model = \"MK+FO+R\",   outdir = tempdir(),   outgroup = NULL,   verbose = FALSE )"},{"path":"/reference/infer_microsynteny_phylogeny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer microsynteny-based phylogeny with IQTREE — infer_microsynteny_phylogeny","text":"transposed_profiles binary transposed profile matrix. profile matrix can obtained phylogenomic_profile(). bootr Numeric scalar number bootstrap replicates. Default: 1000. alrtboot Numeric scalar number replicates SH-like approximate likelihood ratio test. Default: 1000. threads Numeric scalar indicating number threads use \"AUTO\", allows IQTREE automatically choose best number threads use. Default: \"AUTO\". model Substitution model use. unsure, pick default. Default: \"MK+FO+R\". outdir Path output directory. default, files saved temporary directory, deleted R session closes. want keep files, specify custom output directory. outgroup Name outgroup clade group phylogeny. Default: NULL (unrooted phylogeny). verbose Logical indicating progress messages prompted. Default: FALSE.","code":""},{"path":"/reference/infer_microsynteny_phylogeny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer microsynteny-based phylogeny with IQTREE — infer_microsynteny_phylogeny","text":"character vector paths output files.","code":""},{"path":"/reference/infer_microsynteny_phylogeny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer microsynteny-based phylogeny with IQTREE — infer_microsynteny_phylogeny","text":"","code":"data(clusters) profile_matrix <- phylogenomic_profile(clusters) tmat <- binarize_and_transpose(profile_matrix)  # Leave only some legumes and P. mume as an outgroup for testing purposes included <- c(\"gma\", \"pvu\", \"vra\", \"van\", \"cca\", \"pmu\") tmat <- tmat[rownames(tmat) %in% included, ]  # Remove non-variable sites tmat <- tmat[, colSums(tmat) != length(included)]  if(iqtree_is_installed()) {     phylo <- infer_microsynteny_phylogeny(tmat, outgroup = \"pmu\",                                            threads = 1) }"},{"path":"/reference/infer_syntenet.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer synteny network — infer_syntenet","title":"Infer synteny network — infer_syntenet","text":"Infer synteny network","code":""},{"path":"/reference/infer_syntenet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer synteny network — infer_syntenet","text":"","code":"infer_syntenet(   blast_list = NULL,   annotation = NULL,   outdir = tempdir(),   anchors = 5,   max_gaps = 25,   is_pairwise = TRUE,   verbose = FALSE,   bp_param = BiocParallel::SerialParam(),   ... )"},{"path":"/reference/infer_syntenet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer synteny network — infer_syntenet","text":"blast_list list data frames, data frame tabular output BLASTp similar programs, DIAMOND. output function run_diamond(). performed pairwise comparisons command line, can read tabular output data frames combine list. List names must species names separated underscore. instance, first list element data frame containing comparison speciesA (query) speciesB (database), name must \"speciesA_speciesB\". annotation processed GRangesList, CompressedGRangesList, list GRanges returned process_input(). outdir Path output directory. Default: tempdir(). anchors Numeric indicating minimum required number genes call syntenic block. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors. Default: 25. is_pairwise specify pairwise blocks reported Default: TRUE verbose Logical indicating log messages printed screen. Default: FALSE. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam(). ... additional arguments MCScanX algorithm. complete list available options, see man page rcpp_mcscanx_file().","code":""},{"path":"/reference/infer_syntenet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer synteny network — infer_syntenet","text":"network represented edge list.","code":""},{"path":"/reference/infer_syntenet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer synteny network — infer_syntenet","text":"","code":"# Load data data(proteomes) data(annotation) data(blast_list)  # Create processed annotation list annotation <- process_input(proteomes, annotation)$annotation  # Infer the synteny network net <- infer_syntenet(blast_list, annotation)"},{"path":"/reference/interspecies_synteny.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect interspecies synteny — interspecies_synteny","title":"Detect interspecies synteny — interspecies_synteny","text":"Detect interspecies synteny","code":""},{"path":"/reference/interspecies_synteny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect interspecies synteny — interspecies_synteny","text":"","code":"interspecies_synteny(   blast_inter = NULL,   annotation = NULL,   inter_dir = file.path(tempdir(), \"inter\"),   anchors = 5,   max_gaps = 25,   is_pairwise = TRUE,   verbose = FALSE,   bp_param = BiocParallel::SerialParam(),   ... )"},{"path":"/reference/interspecies_synteny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect interspecies synteny — interspecies_synteny","text":"blast_inter list BLAST/DIAMOND data frames interspecies comparisons returned run_diamond(). annotation processed GRangesList CompressedGRangesList object returned process_input(). inter_dir Path output directory .collinearity files stored. anchors Numeric indicating minimum required number genes call syntenic block. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors. Default: 25. is_pairwise specify pairwise blocks reported Default: TRUE. verbose Logical indicating log messages printed screen. Default: FALSE. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam(). ... additional arguments MCScanX algorithm. complete list available options, see man page rcpp_mcscanx_file().","code":""},{"path":"/reference/interspecies_synteny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect interspecies synteny — interspecies_synteny","text":"Paths .collinearity files.","code":""},{"path":"/reference/interspecies_synteny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect interspecies synteny — interspecies_synteny","text":"","code":"# Load data data(proteomes) data(blast_list) data(annotation)  # Get DIAMOND and processed annotation lists blast_inter <- blast_list[2] annotation <- process_input(proteomes, annotation)$annotation  # Detect interspecies synteny intersyn <- interspecies_synteny(blast_inter, annotation)"},{"path":"/reference/intraspecies_synteny.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect intraspecies synteny — intraspecies_synteny","title":"Detect intraspecies synteny — intraspecies_synteny","text":"Detect intraspecies synteny","code":""},{"path":"/reference/intraspecies_synteny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect intraspecies synteny — intraspecies_synteny","text":"","code":"intraspecies_synteny(   blast_intra = NULL,   annotation = NULL,   intra_dir = file.path(tempdir(), \"intra\"),   anchors = 5,   max_gaps = 25,   is_pairwise = TRUE,   verbose = FALSE,   bp_param = BiocParallel::SerialParam(),   ... )"},{"path":"/reference/intraspecies_synteny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect intraspecies synteny — intraspecies_synteny","text":"blast_intra list BLAST/DIAMOND data frames intraspecies comparisons returned run_diamond(). annotation processed GRangesList CompressedGRangesList object returned process_input(). intra_dir Path output directory .collinearity files stored. anchors Numeric indicating minimum required number genes call syntenic block. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors. Default: 25. is_pairwise Logical indicating pairwise blocks reported. Default: TRUE. verbose Logical indicating log messages printed screen. Default: FALSE. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam(). ... additional arguments MCScanX algorithm. complete list available options, see man page rcpp_mcscanx_file().","code":""},{"path":"/reference/intraspecies_synteny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect intraspecies synteny — intraspecies_synteny","text":"Paths .collinearity files.","code":""},{"path":"/reference/intraspecies_synteny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect intraspecies synteny — intraspecies_synteny","text":"","code":"# Load data data(scerevisiae_annot) data(scerevisiae_diamond)  # Detect intragenome synteny intra_syn <- intraspecies_synteny(     scerevisiae_diamond, scerevisiae_annot )"},{"path":"/reference/iqtree_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if IQTREE is installed — iqtree_is_installed","title":"Check if IQTREE is installed — iqtree_is_installed","text":"Check IQTREE installed","code":""},{"path":"/reference/iqtree_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if IQTREE is installed — iqtree_is_installed","text":"","code":"iqtree_is_installed()"},{"path":"/reference/iqtree_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if IQTREE is installed — iqtree_is_installed","text":"Logical indicating whether IQTREE installed .","code":""},{"path":"/reference/iqtree_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if IQTREE is installed — iqtree_is_installed","text":"","code":"iqtree_is_installed() #> [1] TRUE"},{"path":"/reference/iqtree_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IQ-TREE version — iqtree_version","title":"Get IQ-TREE version — iqtree_version","text":"Get IQ-TREE version","code":""},{"path":"/reference/iqtree_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IQ-TREE version — iqtree_version","text":"","code":"iqtree_version()"},{"path":"/reference/iqtree_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get IQ-TREE version — iqtree_version","text":"Numeric indicating IQ-TREE version, either 1 2.","code":""},{"path":"/reference/iqtree_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get IQ-TREE version — iqtree_version","text":"","code":"iqtree_version() #> [1] 2"},{"path":"/reference/last_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if last is installed — last_is_installed","title":"Check if last is installed — last_is_installed","text":"Check last installed","code":""},{"path":"/reference/last_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if last is installed — last_is_installed","text":"","code":"last_is_installed()"},{"path":"/reference/last_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if last is installed — last_is_installed","text":"Logical indicating whether last installed .","code":""},{"path":"/reference/last_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if last is installed — last_is_installed","text":"","code":"last_is_installed() #> [1] TRUE"},{"path":"/reference/network.html","id":null,"dir":"Reference","previous_headings":"","what":"Synteny network of BUSCO genes for 25 eudicot species — network","title":"Synteny network of BUSCO genes for 25 eudicot species — network","text":"Data obtained Zhao & Schranz, 2019.","code":""},{"path":"/reference/network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synteny network of BUSCO genes for 25 eudicot species — network","text":"","code":"data(network)"},{"path":"/reference/network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synteny network of BUSCO genes for 25 eudicot species — network","text":"edgelist (.e., 2-column data frame node 1 column 1 node 2 column 2).","code":""},{"path":"/reference/network.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synteny network of BUSCO genes for 25 eudicot species — network","text":"Zhao, T., & Schranz, M. E. (2019). Network-based microsynteny analysis identifies major differences genomic outliers mammalian angiosperm genomes. Proceedings National Academy Sciences, 116(6), 2165-2174.","code":""},{"path":"/reference/network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synteny network of BUSCO genes for 25 eudicot species — network","text":"","code":"data(network)"},{"path":"/reference/parse_collinearity.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse .collinearity files obtained with MCScan — parse_collinearity","title":"Parse .collinearity files obtained with MCScan — parse_collinearity","text":".collinearity files can obtained intraspecies_synteny interspecies_synteny, execute native version MCScan algorithm.","code":""},{"path":"/reference/parse_collinearity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse .collinearity files obtained with MCScan — parse_collinearity","text":"","code":"parse_collinearity(collinearity_paths = NULL, as = \"anchors\")"},{"path":"/reference/parse_collinearity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse .collinearity files obtained with MCScan — parse_collinearity","text":"collinearity_paths Character vector paths .collinearity files. Character specifying extract. One \"anchors\" (default), \"blocks\", \"\".","code":""},{"path":"/reference/parse_collinearity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse .collinearity files obtained with MCScan — parse_collinearity","text":"\"anchors\", data frame variables \"Anchor1\", \"Anchor2\". \"blocks\", data frame variables \"Block\", \"Block_score\", \"Chr\", \"Orientation\". \"\", data frame aforementioned variables, indicate: Block Numeric, synteny block ID Block_score Numeric, score synteny block. Chr Character, query target chromosome synteny block formatted \"&\". Orientation Character, orientation genes within blocks, \"plus\" indicating genes direction, \"minus\" indicating genes opposite directions. Anchor1 Character, gene ID anchor 1. Anchor2 Character, gene ID anchor 2.","code":""},{"path":"/reference/parse_collinearity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse .collinearity files obtained with MCScan — parse_collinearity","text":"","code":"collinearity_paths <- system.file(     \"extdata\", \"Scerevisiae.collinearity\", package = \"syntenet\" ) net <- parse_collinearity(collinearity_paths)"},{"path":"/reference/phylogenomic_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform phylogenomic profiling for synteny network clusters — phylogenomic_profile","title":"Perform phylogenomic profiling for synteny network clusters — phylogenomic_profile","text":"Perform phylogenomic profiling synteny network clusters","code":""},{"path":"/reference/phylogenomic_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform phylogenomic profiling for synteny network clusters — phylogenomic_profile","text":"","code":"phylogenomic_profile(clusters = NULL)"},{"path":"/reference/phylogenomic_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform phylogenomic profiling for synteny network clusters — phylogenomic_profile","text":"clusters 2-column data frame variables Gene Cluster returned cluster_network.","code":""},{"path":"/reference/phylogenomic_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform phylogenomic profiling for synteny network clusters — phylogenomic_profile","text":"matrix rows j columns containing number genes cluster species j. number rows equal number clusters clusters, number columns equal number species clusters.","code":""},{"path":"/reference/phylogenomic_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform phylogenomic profiling for synteny network clusters — phylogenomic_profile","text":"","code":"data(clusters) profiles <- phylogenomic_profile(clusters)"},{"path":"/reference/plot_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot network — plot_network","title":"Plot network — plot_network","text":"Plot network","code":""},{"path":"/reference/plot_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot network — plot_network","text":"","code":"plot_network(   network = NULL,   clusters = NULL,   cluster_id = NULL,   color_by = \"cluster\",   interactive = FALSE,   dim_interactive = c(600, 600) )"},{"path":"/reference/plot_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot network — plot_network","text":"network synteny network represented edge list, 2-column data frame member anchor pair column. clusters 2-column data frame variables Gene Cluster representing gene ID cluster ID, respectively, exactly returned cluster_network. cluster_id Character scalar vector cluster ID. one cluster passed input, clusters colored differently. color_by Either \"cluster\" 2-column data frame gene IDs first column variable used coloring (e.g., taxonomic information) second column. interactive Logical scalar indicating whether display interactive network . Default: FALSE. dim_interactive Numeric vector length 2 window dimensions interactive plot. interactive set FALSE, parameter ignored.","code":""},{"path":"/reference/plot_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot network — plot_network","text":"ggplot object network.","code":""},{"path":"/reference/plot_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot network — plot_network","text":"","code":"data(network) data(clusters) # Option 1: 1 cluster cluster_id <- 25 plot_network(network, clusters, cluster_id)   # Option 2: 2 clusters cluster_id <- c(25, 1089) plot_network(network, clusters, cluster_id)   # Option 3: custom annotation for coloring species_order <- c(     \"vra\", \"van\", \"pvu\", \"gma\", \"cca\", \"tpr\", \"mtr\", \"adu\", \"lja\",     \"Lang\", \"car\", \"pmu\", \"ppe\", \"pbr\", \"mdo\", \"roc\", \"fve\",     \"Mnot\", \"Zjuj\", \"jcu\", \"mes\", \"rco\", \"lus\", \"ptr\" )  species_annotation <- data.frame(    Species = species_order,    Family = c(rep(\"Fabaceae\", 11), rep(\"Rosaceae\", 6),               \"Moraceae\", \"Ramnaceae\", rep(\"Euphorbiaceae\", 3),                \"Linaceae\", \"Salicaceae\") ) genes <- unique(c(network$node1, network$node2)) gene_df <- data.frame(     Gene = genes,     Species = unlist(lapply(strsplit(genes, \"_\"), head, 1)) ) gene_df <- merge(gene_df, species_annotation)[, c(\"Gene\", \"Family\")]  plot_network(network, clusters, cluster_id = 25, color_by = gene_df)"},{"path":"/reference/plot_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a heatmap of phylogenomic profiles — plot_profiles","title":"Plot a heatmap of phylogenomic profiles — plot_profiles","text":"Plot heatmap phylogenomic profiles","code":""},{"path":"/reference/plot_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a heatmap of phylogenomic profiles — plot_profiles","text":"","code":"plot_profiles(   profile_matrix = NULL,   species_annotation = NULL,   palette = \"Greens\",   dist_function = stats::dist,   dist_params = list(method = \"euclidean\"),   clust_function = stats::hclust,   clust_params = list(method = \"ward.D\"),   cluster_species = FALSE,   show_colnames = FALSE,   discretize = TRUE,   ... )"},{"path":"/reference/plot_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a heatmap of phylogenomic profiles — plot_profiles","text":"profile_matrix matrix phylogenomic profiles obtained phylogenomic_profile. species_annotation 2-column data frame species IDs first column (column names profile matrix), species annotation (e.g., higher-level taxonomic information) second column. palette character vector colors character scalar name RColorBrewer palette. Default: \"RdYlBu\". dist_function Function use calculate distance matrix synteny clusters. Popular examples include stats::dist, labdsv::dsvdis, vegan::vegdist. Default: stats::dist. dist_params list parameters passed function specified parameter dist_function. Default: list(method = \"euclidean\"). clust_function Function use cluster distance matrix returned function specified dist_function. Examples include stats::hclust Rclusterpp::Rclusterpp.hclust. Default: stats::hclust. clust_params list additional parameters () passed function specified parameter clust_function. Default: list(method = \"ward.D\"). cluster_species Either logical scalar (TRUE FALSE) character vector order species arranged. TRUE FALSE indicate whether hierarchical clustering applied rows (species). Ideally, character vector contain order species phylogenetically meaningful way. users pass named vector, vector names used rename species. users species tree, can read treeio::read.tree(), plot ggtree::ggtree(), get species order ggtree object ggtree::get_taxa_name(). Default: FALSE. show_colnames Logical indicating whether show column names (.e., cluster IDs) . Showing cluster IDs can useful visualizing small subset . visualizing clusters, cluster IDs impossible read. Default: FALSE. discretize Logical indicating whether discretize clusters 4 categories: 0, 1, 2, 3+. FALSE, counts log2 transformed. Default: TRUE. ... Additional parameters pheatmap::pheatmap().","code":""},{"path":"/reference/plot_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a heatmap of phylogenomic profiles — plot_profiles","text":"pheatmap object.","code":""},{"path":"/reference/plot_profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a heatmap of phylogenomic profiles — plot_profiles","text":"","code":"data(clusters) profile_matrix <- phylogenomic_profile(clusters) species_order <- c(     \"vra\", \"van\", \"pvu\", \"gma\", \"cca\", \"tpr\", \"mtr\", \"adu\", \"lja\",     \"Lang\", \"car\", \"pmu\", \"ppe\", \"pbr\", \"mdo\", \"roc\", \"fve\",     \"Mnot\", \"Zjuj\", \"jcu\", \"mes\", \"rco\", \"lus\", \"ptr\" ) species_names <- c(     \"V. radiata\", \"V. angularis\", \"P. vulgaris\", \"G. max\", \"C. cajan\",     \"T. pratense\", \"M. truncatula\", \"A. duranensis\", \"L. japonicus\",     \"L. angustifolius\", \"C. arietinum\", \"P. mume\", \"P. persica\",     \"P. bretschneideri\", \"M. domestica\", \"R. occidentalis\",      \"F. vesca\", \"M. notabilis\", \"Z. jujuba\", \"J. curcas\",     \"M. esculenta\", \"R. communis\", \"L. usitatissimum\", \"P. trichocarpa\" ) names(species_order) <- species_names species_annotation <- data.frame(    Species = species_order,    Family = c(rep(\"Fabaceae\", 11), rep(\"Rosaceae\", 6),               \"Moraceae\", \"Ramnaceae\", rep(\"Euphorbiaceae\", 3),                \"Linaceae\", \"Salicaceae\") ) p <- plot_profiles(profile_matrix, species_annotation,                     cluster_species = species_order)                      p <- plot_profiles(profile_matrix, species_annotation,                     cluster_species = species_order,                     discretize = FALSE)"},{"path":"/reference/process_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Process sequence data — process_input","title":"Process sequence data — process_input","text":"Process sequence data","code":""},{"path":"/reference/process_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process sequence data — process_input","text":"","code":"process_input(   seq = NULL,   annotation = NULL,   gene_field = \"gene_id\",   filter_annotation = FALSE )"},{"path":"/reference/process_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process sequence data — process_input","text":"seq list AAStringSet objects, list element containing protein sequences given species. list must names (NULL), names list element must match names list elements annotation. annotation GRangesList, CompressedGRangesList, list GRanges annotation sequences seq. list must names (NULL), names list element must match names list elements seq. gene_field Character, name column GRanges objects contains gene IDs. Default: \"gene_id\". filter_annotation Logical indicating whether annotation filtered keep genes also seq. particularly useful users want remove information non-protein coding genes annotation, since genes typically present sets whole-genome protein sequences. Default: FALSE.","code":""},{"path":"/reference/process_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process sequence data — process_input","text":"list 2 elements: seq processed list AAStringSet objects seq. annotation processed GRangesList CompressedGRangesList object annotation.","code":""},{"path":"/reference/process_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process sequence data — process_input","text":"function processes input sequences annotation : Remove whitespace anything sequence names (.e., names(seq[[x]]), equivalent FASTA headers), . Add unique species identifier sequence names. species identifier consists first 3-5 strings element name. instance, first element seq list named \"Athaliana\", sequence identifier \"Atha_\" added beginning gene name (e.g., Atha_AT1G01010). sequences asterisk (*) representing stop codon, remove . Add unique species identifier () gene chromosome names element annotation GRangesList/CompressedGRangesList. Filter element annotation GRangesList/CompressedGRangesList keep seqnames, ranges, gene ID.","code":""},{"path":"/reference/process_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process sequence data — process_input","text":"","code":"data(annotation) data(proteomes) seq <- proteomes clean_data <- process_input(seq, annotation)"},{"path":"/reference/profiles2phylip.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the transposed binary profiles matrix to a file in PHYLIP format — profiles2phylip","title":"Save the transposed binary profiles matrix to a file in PHYLIP format — profiles2phylip","text":"Save transposed binary profiles matrix file PHYLIP format","code":""},{"path":"/reference/profiles2phylip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the transposed binary profiles matrix to a file in PHYLIP format — profiles2phylip","text":"","code":"profiles2phylip(transposed_profiles = NULL, outdir = tempdir())"},{"path":"/reference/profiles2phylip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the transposed binary profiles matrix to a file in PHYLIP format — profiles2phylip","text":"transposed_profiles binary transposed profile matrix. profile matrix can obtained phylogenomic_profile(). outdir Path output directory. default, files saved temporary directory, deleted R session closes. want keep files, specify custom output directory.","code":""},{"path":"/reference/profiles2phylip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the transposed binary profiles matrix to a file in PHYLIP format — profiles2phylip","text":"Character specifying path PHYLIP file.","code":""},{"path":"/reference/profiles2phylip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the transposed binary profiles matrix to a file in PHYLIP format — profiles2phylip","text":"","code":"data(clusters) profile_matrix <- phylogenomic_profile(clusters) tmat <- binarize_and_transpose(profile_matrix) profiles2phylip(tmat) #> [1] \"/tmp/RtmpNS1OhZ/microsynteny_phylogeny_08_Oct_2024_09h27.phy\""},{"path":"/reference/proteomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtered proteomes of Ostreococcus sp. species — proteomes","title":"Filtered proteomes of Ostreococcus sp. species — proteomes","text":"Data obtained Pico-PLAZA 3.0. translated sequences primary transcripts included, genes chromosomes 1, 2, 3.","code":""},{"path":"/reference/proteomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtered proteomes of Ostreococcus sp. species — proteomes","text":"","code":"data(proteomes)"},{"path":"/reference/proteomes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Filtered proteomes of Ostreococcus sp. species — proteomes","text":"list AAStringSet objects containing elements Olucimarinus, Osp_RCC809, Otauri.","code":""},{"path":"/reference/proteomes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filtered proteomes of Ostreococcus sp. species — proteomes","text":"Van Bel, M., Silvestri, F., Weitz, E. M., Kreft, L., Botzki, ., Coppens, F., & Vandepoele, K. (2021). PLAZA 5.0: extending scope power comparative functional genomics plants. Nucleic acids research.","code":""},{"path":"/reference/proteomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtered proteomes of Ostreococcus sp. species — proteomes","text":"","code":"data(proteomes)"},{"path":"/reference/rcpp_mcscanx_file.html","id":null,"dir":"Reference","previous_headings":"","what":"rcpp_mcscanx_file — rcpp_mcscanx_file","title":"rcpp_mcscanx_file — rcpp_mcscanx_file","text":"MCSCanX provides clustering module viewing relationship collinear segments multiple genomes (heavily redundant genomes). takes predicted pairwise segments dynamic programming (DAGchainer particular) tries build consensus segments set related, overlapping segments.","code":""},{"path":"/reference/rcpp_mcscanx_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rcpp_mcscanx_file — rcpp_mcscanx_file","text":"","code":"rcpp_mcscanx_file(   blast_file,   gff_file,   prefix = \"out\",   outdir = \"\",   match_score = 50L,   gap_penalty = -1L,   match_size = 5L,   e_value = 1e-05,   max_gaps = 25L,   overlap_window = 5L,   is_pairwise = FALSE,   in_synteny = 0L,   species_id_length = 3L,   verbose = FALSE )"},{"path":"/reference/rcpp_mcscanx_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rcpp_mcscanx_file — rcpp_mcscanx_file","text":"blast_file Character indicating path BLAST/DIAMOND output file. gff_file Character indicating path \"gff\" file, tab-delimited file 4 columns indicating chromosome name, gene id, gene start position, gene end position, respectively. prefix Character indicating prefix output files. Default: \"\". outdir Character indicating path output directory. Default: \"\". match_score Numeric indicating match score. Default: 50. gap_penalty Numeric indicating gap penalty. Default: -1. match_size Numeric indicating minimum number genes required call synteny. Default: 5. e_value Numeric indicating minimum e-value allowed. Default: 1e-5. max_gaps Numeric indicating maximum number gaps genes allowed. unit measure gaps number genes, max_gaps = 20 indicates maximum 20 genes can exist two homologous genes synteny called. Default: 25. overlap_window Numeric indicating overlap window. Default: 5. is_pairwise Logical indicating whether pairwise blocks reported. Default: FALSE. in_synteny Numeric indicating patterns collinear blocks, 0 indicates intra interspecies comparisons, 1 indicates intraspecies comparisons, 2 indicates interspecies comparisons. Default: 0. species_id_length Integer indicating length species IDs. Default: 3. 0: intra- inter-species (default); 1: intra-species; 2: inter-species verbose Logical indicating whether print progress messages screen. Default: FALSE.","code":""},{"path":"/reference/rcpp_mcscanx_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rcpp_mcscanx_file — rcpp_mcscanx_file","text":"NULL, .collinearity file created directory specified outdir.","code":""},{"path":"/reference/rcpp_mcscanx_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"rcpp_mcscanx_file — rcpp_mcscanx_file","text":"Wang et al. (2012) MCScanX: toolkit detection evolutionary analysis gene synteny collinearity. Nucleic acids research. 40.7, e49-e49. Haas et al. (2004) DAGchainer: tool mining segmental genome duplications synteny. Bioinformatics. 20.18 3643-3646.","code":""},{"path":"/reference/rcpp_mcscanx_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rcpp_mcscanx_file — rcpp_mcscanx_file","text":"Kristian K Ullrich Fabricio Almeida-Silva","code":""},{"path":"/reference/read_diamond.html","id":null,"dir":"Reference","previous_headings":"","what":"Read DIAMOND/BLAST tables as a list of data frames — read_diamond","title":"Read DIAMOND/BLAST tables as a list of data frames — read_diamond","text":"Read DIAMOND/BLAST tables list data frames","code":""},{"path":"/reference/read_diamond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read DIAMOND/BLAST tables as a list of data frames — read_diamond","text":"","code":"read_diamond(diamond_dir = NULL)"},{"path":"/reference/read_diamond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read DIAMOND/BLAST tables as a list of data frames — read_diamond","text":"diamond_dir Path directory containing tabular output DIAMOND similar programs (e.g., BLAST).","code":""},{"path":"/reference/read_diamond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read DIAMOND/BLAST tables as a list of data frames — read_diamond","text":"list data frames tabular DIAMOND output.","code":""},{"path":"/reference/read_diamond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read DIAMOND/BLAST tables as a list of data frames — read_diamond","text":"","code":"# Path to output directory diamond_dir <- system.file(\"extdata\", package = \"syntenet\")  # Read output l <- read_diamond(diamond_dir)"},{"path":"/reference/run_diamond.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to run DIAMOND from an R session — run_diamond","title":"Wrapper to run DIAMOND from an R session — run_diamond","text":"Wrapper run DIAMOND R session","code":""},{"path":"/reference/run_diamond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to run DIAMOND from an R session — run_diamond","text":"","code":"run_diamond(   seq = NULL,   top_hits = 5,   verbose = FALSE,   outdir = tempdir(),   threads = NULL,   compare = \"all\",   ... )"},{"path":"/reference/run_diamond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to run DIAMOND from an R session — run_diamond","text":"seq processed list AAStringSet objects returned process_input(). top_hits Number top hits keep DIAMOND search. Default: 5. verbose Logical indicating progress messages printed. Default: FALSE. outdir Output directory DIAMOND results. default, output files saved temporary directory. threads Number threads use. Default: let DIAMOND auto-detect use available virtual cores machine. compare Character scalar indicating comparisons made running DIAMOND. Possible modes \"\" (-vs-comparisons), \"intraspecies\" (intraspecies comparisons ), \"interspecies\" (interspecies comparisons ). Alternatively, users can pass 2-column data frame input names species compared. ... additional arguments diamond blastp.","code":""},{"path":"/reference/run_diamond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to run DIAMOND from an R session — run_diamond","text":"list data frames containing DIAMOND's tabular output pairwise combination species. n species, list length \\(n^2\\).","code":""},{"path":"/reference/run_diamond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to run DIAMOND from an R session — run_diamond","text":"","code":"data(proteomes) data(annotation) seq <- process_input(proteomes, annotation)$seq[1:2] if(diamond_is_installed()) {     diamond_results <- run_diamond(seq) }"},{"path":"/reference/run_last.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to run last from an R session — run_last","title":"Wrapper to run last from an R session — run_last","text":"Wrapper run last R session","code":""},{"path":"/reference/run_last.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to run last from an R session — run_last","text":"","code":"run_last(   seq = NULL,   verbose = FALSE,   outdir = tempdir(),   threads = 1,   compare = \"all\",   lastD = 1e+06,   ... )"},{"path":"/reference/run_last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to run last from an R session — run_last","text":"seq processed list AAStringSet objects returned process_input(). verbose Logical indicating progress messages printed. Default: FALSE. outdir Output directory last results. default, output files saved temporary directory. threads Number threads use. Default: 1. compare Character scalar indicating comparisons made running last. Possible modes \"\" (-vs-comparisons), \"intraspecies\" (intraspecies comparisons ), \"interspecies\" (interspecies comparisons ). Alternatively, users can pass 2-column data frame input names species compared. lastD last option D: query letters per random alignment. Default: 1e6. ... additional arguments lastal.","code":""},{"path":"/reference/run_last.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to run last from an R session — run_last","text":"list data frames containing last's tabular output pairwise combination species. n species, list length \\(n^2\\).","code":""},{"path":"/reference/run_last.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to run last from an R session — run_last","text":"","code":"data(proteomes) data(annotation) seq <- process_input(proteomes, annotation)$seq[1:2] if(last_is_installed()) {     last_results <- run_last(seq) }"},{"path":"/reference/scerevisiae_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome annotation of the yeast species S. cerevisiae — scerevisiae_annot","title":"Genome annotation of the yeast species S. cerevisiae — scerevisiae_annot","text":"Data obtained Ensembl Fungi. annotation data primary transcripts included.","code":""},{"path":"/reference/scerevisiae_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome annotation of the yeast species S. cerevisiae — scerevisiae_annot","text":"","code":"data(scerevisiae_annot)"},{"path":"/reference/scerevisiae_annot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genome annotation of the yeast species S. cerevisiae — scerevisiae_annot","text":"GRangesList returned process_input() containing element Scerevisiae.","code":""},{"path":"/reference/scerevisiae_annot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome annotation of the yeast species S. cerevisiae — scerevisiae_annot","text":"","code":"data(scerevisiae_annot)"},{"path":"/reference/scerevisiae_diamond.html","id":null,"dir":"Reference","previous_headings":"","what":"Intraspecies DIAMOND output for S. cerevisiae — scerevisiae_diamond","title":"Intraspecies DIAMOND output for S. cerevisiae — scerevisiae_diamond","text":"List obtained run_diamond().","code":""},{"path":"/reference/scerevisiae_diamond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intraspecies DIAMOND output for S. cerevisiae — scerevisiae_diamond","text":"","code":"data(scerevisiae_diamond)"},{"path":"/reference/scerevisiae_diamond.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intraspecies DIAMOND output for S. cerevisiae — scerevisiae_diamond","text":"list data frames (length 1) containing whole paranome S. cerevisiae resulting intragenome similarity searches.","code":""},{"path":"/reference/scerevisiae_diamond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intraspecies DIAMOND output for S. cerevisiae — scerevisiae_diamond","text":"","code":"data(scerevisiae_diamond)"},{"path":"/reference/syntenet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"syntenet: Inference And Analysis Of Synteny Networks — syntenet-package","title":"syntenet: Inference And Analysis Of Synteny Networks — syntenet-package","text":"syntenet can used infer synteny networks whole-genome protein sequences analyze . Anchor pairs detected MCScanX algorithm, ported package Rcpp framework R C++ integration. Anchor pairs synteny analyses treated undirected unweighted graph (.e., synteny network), users can perform: . network clustering; ii. phylogenomic profiling (identifying species contain clusters) ; iii. microsynteny-based phylogeny reconstruction maximum likelihood.","code":""},{"path":[]},{"path":"/reference/syntenet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"syntenet: Inference And Analysis Of Synteny Networks — syntenet-package","text":"Maintainer: Fabrício Almeida-Silva fabricio_almeidasilva@hotmail.com (ORCID) Authors: Tao Zhao tao.zhao@nwafu.edu.cn (ORCID) Kristian K Ullrich ullrich@evolbio.mpg.de (ORCID) Yves Van de Peer yves.vandepeer@psb.vib-ugent.(ORCID)","code":""},{"path":"/news/index.html","id":"syntenet-0990","dir":"Changelog","previous_headings":"","what":"syntenet 0.99.0","title":"syntenet 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"syntenet-0995","dir":"Changelog","previous_headings":"","what":"syntenet 0.99.5","title":"syntenet 0.99.5","text":"NEW FEATURES Replaced distance measure clustering phylogenomic profiles: vegan::vegdist labdsv::dsvdis","code":""},{"path":"/news/index.html","id":"syntenet-0997","dir":"Changelog","previous_headings":"","what":"syntenet 0.99.7","title":"syntenet 0.99.7","text":"NEW FEATURES Added functions fasta2AAStringSetlist gff2GRangesList help users read multiple FASTA GFF/GTF files list AAStringSet GRangesList, respectively. Updated vignette instruct users load FASTA GFF/GTF files R session.","code":""},{"path":"/news/index.html","id":"syntenet-111","dir":"Changelog","previous_headings":"","what":"syntenet 1.1.1","title":"syntenet 1.1.1","text":"NEW FEATURES Ward’s clustering synteny clusters now performed prior plotting plot_profiles(), phylogenomic_profile(). consequence, phylogenomic_profile() now returns matrix profiles, list containing matrix hclust object. Added option handle names vector cluster_species new names display heatmap. way, species abbreviations can easily replaced species’ full names make plots look better. Added parameters dist_function dist_params allow users specify function parameters calculate distance matrix passed Ward’s clustering.","code":""},{"path":"/news/index.html","id":"syntenet-112","dir":"Changelog","previous_headings":"","what":"syntenet 1.1.2","title":"syntenet 1.1.2","text":"NEW FEATURES Added parameters clust_function clust_params cluster_network() let users pass igraph::cluster_* function cluster synteny network. Added parameters clust_function clust_params plot_profiles() let users control method used cluster distance matrix (columns phylogenomic profiles). Updated vignette reflect changes mentioned included FAQ item instructions update R PATH variable.","code":""},{"path":"/news/index.html","id":"syntenet-113","dir":"Changelog","previous_headings":"","what":"syntenet 1.1.3","title":"syntenet 1.1.3","text":"BUG FIXES Tidy evaluation aes_() deprecated ggplot 3.0.0, testthat now returns warnings . Replaced aes_() aes() .data rlang package.","code":""},{"path":"/news/index.html","id":"syntenet-114","dir":"Changelog","previous_headings":"","what":"syntenet 1.1.4","title":"syntenet 1.1.4","text":"BUG FIXES Replaced sprintf calls snprintf calls C++ code address warnings devel branch Bioc UPDATES Added CITATION file reference published paper","code":""},{"path":"/news/index.html","id":"syntenet-115","dir":"Changelog","previous_headings":"","what":"syntenet 1.1.5","title":"syntenet 1.1.5","text":"BUG FIXES Fixed species ID retrieval adding exported function named create_species_id_table() correctly creates unique species IDs (3-5 characters), even first 5 characters equal. intraspecies_synteny() interspecies_synteny() (originally unexported) now take output process_input(), makes consistent entire package. NEW FEATURES make easier users want run DIAMOND command line, added functions export_sequences() read_diamond(), write processed sequences FASTA files read DIAMOND output, respectively. example code run DIAMOND command line added vignette. Included section vignette use syntenet synteny detection program (.e., find synteny within single genome two genomes).","code":""},{"path":"/news/index.html","id":"syntenet-116","dir":"Changelog","previous_headings":"","what":"syntenet 1.1.6","title":"syntenet 1.1.6","text":"BUG FIXES Added check IQ-TREE version installed. IQ-TREE2 installed (IQ-TREE), arguments call modified accordingly, IQ-TREE developers changed parameters (e.g., -bb now -B). NEW FEATURES Added parameter parse_collinearity() allows extraction synteny block information .collinearity files. vignette updated accordingly.","code":""},{"path":"/news/index.html","id":"syntenet-131","dir":"Changelog","previous_headings":"","what":"syntenet 1.3.1","title":"syntenet 1.3.1","text":"NEW FEATURES Added function collapse_protein_ids() replace protein IDs sequence names (equivalent FASTA headers) gene IDs. multiple protein gene, onlt longest kept. Vignette updated accordingly.","code":""},{"path":"/news/index.html","id":"syntenet-132","dir":"Changelog","previous_headings":"","what":"syntenet 1.3.2","title":"syntenet 1.3.2","text":"BUG FIXES Strand information now preserved output process_input() (users want plot synteny).","code":""},{"path":[]},{"path":"/news/index.html","id":"syntenet-134","dir":"Changelog","previous_headings":"","what":"syntenet 1.3.4","title":"syntenet 1.3.4","text":"BUG FIXES","code":""},{"path":"/news/index.html","id":"syntenet-135","dir":"Changelog","previous_headings":"","what":"syntenet 1.3.5","title":"syntenet 1.3.5","text":"NEW FEATURES Added function run_last() run alternative BLAST search. Vignette updated accordingly.","code":""}]
